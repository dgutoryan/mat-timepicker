[
  {
    "breadcrumbs": [
      "Getting started"
    ],
    "pageType": "guide",
    "title": "Getting started",
    "section": "Getting started",
    "route": "/getting-started",
    "fragment": "getting-started",
    "content": "You have to install the Angular Material and set it up. Learn more about the setup. Install the ngx-mat-timepicker: or"
  },
  {
    "breadcrumbs": [
      "Getting started"
    ],
    "pageType": "guide",
    "title": "Getting started",
    "section": "Import module",
    "route": "/getting-started",
    "fragment": "import-module",
    "content": "Import MatTimepickerModule to your project."
  },
  {
    "breadcrumbs": [
      "Getting started"
    ],
    "pageType": "guide",
    "title": "Getting started",
    "section": "Adapter",
    "route": "/getting-started",
    "fragment": "adapter",
    "content": "Add a timepicker adapter. or create and add your own"
  },
  {
    "breadcrumbs": [
      "Getting started"
    ],
    "pageType": "guide",
    "title": "Getting started",
    "section": "Theming",
    "route": "/getting-started",
    "fragment": "theming",
    "content": "Then you have to define a theme. More details about theming. As ngx-mat-timepicker uses some material components, it's necessary to add theme for them."
  },
  {
    "breadcrumbs": [
      "Usage"
    ],
    "pageType": "guide",
    "title": "Usage",
    "section": "Basic",
    "route": "/usage",
    "fragment": "basic",
    "content": "The timepicker allows users to enter a time either through text input, or by choosing a time from the dial or by inputs. First, it will be checked if any time is selected, if so it will open pop-up with that time. Otherwise it will open pop-up with the current time."
  },
  {
    "breadcrumbs": [
      "Usage"
    ],
    "pageType": "guide",
    "title": "Usage",
    "section": "Connecting a timepicker to an input",
    "route": "/usage",
    "fragment": "connecting-a-timepicker-to-an-input",
    "content": "A timepicker is composed of a text input and a pop-up with dial or inputs view, connected via the matTimepicker property on the text input. There is also an optional timepicker toggle button that gives the user an easy way to open the timepicker pop-up. This works exactly the same with an input that is part of an "
  },
  {
    "breadcrumbs": [
      "Usage"
    ],
    "pageType": "guide",
    "title": "Usage",
    "section": "Connecting a timepicker to an input",
    "route": "/usage",
    "fragment": "connecting-a-timepicker-to-an-input",
    "content": " and the toggle can easily be used as a prefix or suffix on the Material input:"
  },
  {
    "breadcrumbs": [
      "Usage"
    ],
    "pageType": "guide",
    "title": "Usage",
    "section": "Connecting a timepicker to an input",
    "route": "/usage",
    "fragment": "connecting-a-timepicker-to-an-input",
    "content": "If you want to customize the icon that is rendered inside the mat-timepicker-toggle, you can do so by using the matTimepickerToggleIcon directive:"
  },
  {
    "breadcrumbs": [
      "Usage"
    ],
    "pageType": "guide",
    "title": "Usage",
    "section": "Starting view",
    "route": "/usage",
    "fragment": "starting-view",
    "content": "The mode property of "
  },
  {
    "breadcrumbs": [
      "Usage"
    ],
    "pageType": "guide",
    "title": "Usage",
    "section": "Starting view",
    "route": "/usage",
    "fragment": "starting-view",
    "content": " can be used to set the view that will show up when the pop-up first opens. It can be set to dial (default) and input."
  },
  {
    "breadcrumbs": [
      "Usage"
    ],
    "pageType": "guide",
    "title": "Usage",
    "section": "Starting view",
    "route": "/usage",
    "fragment": "starting-view",
    "content": "The are two time formats 12h and 24h. The format property of "
  },
  {
    "breadcrumbs": [
      "Usage"
    ],
    "pageType": "guide",
    "title": "Usage",
    "section": "Starting view",
    "route": "/usage",
    "fragment": "starting-view",
    "content": " is used to set the format for the timepicker. 12h is used by default."
  },
  {
    "breadcrumbs": [
      "Usage"
    ],
    "pageType": "guide",
    "title": "Usage",
    "section": "Starting view",
    "route": "/usage",
    "fragment": "starting-view",
    "content": "By default, the timepicker is opened as pop-up. Use openAs property with dialog value to open it as material dialog. There is an additional view for dial mode. You can use orientation property for "
  },
  {
    "breadcrumbs": [
      "Usage"
    ],
    "pageType": "guide",
    "title": "Usage",
    "section": "Starting view",
    "route": "/usage",
    "fragment": "starting-view",
    "content": " to set elements horizontally. It works for dial mode only."
  },
  {
    "breadcrumbs": [
      "Usage"
    ],
    "pageType": "guide",
    "title": "Usage",
    "section": "Setting the selected time",
    "route": "/usage",
    "fragment": "setting-the-selected-time",
    "content": "The type of values that the timepicker expects depends on the type of TimeAdapter provided in your application. The MatNativeDateTimeModule, for example, works directly with plain JavaScript Date objects. This use of the adapter pattern allows the timepicker component to work with any arbitrary time representation with a custom TimeAdapter."
  },
  {
    "breadcrumbs": [
      "Usage"
    ],
    "pageType": "guide",
    "title": "Usage",
    "section": "Changing colors",
    "route": "/usage",
    "fragment": "changing-colors",
    "content": "The timepicker will automatically inherit the color palette (primary, accent, or warn) from the mat-form-field it is attached to. If you would like to specify a different palette for the timepicker you can do so by setting the color property on mat-timepicker."
  },
  {
    "breadcrumbs": [
      "Usage"
    ],
    "pageType": "guide",
    "title": "Usage",
    "section": "Time validation",
    "route": "/usage",
    "fragment": "time-validation",
    "content": "There are two properties to add time validation to the timepicker input - min and max. In addition to enforcing validation on the input, these properties will disable all hours and minutes on the timepicker before or after the respective values and prevent the user from choosing the time past the hours or minutes containing the min or max time. There are different errors that can be checked: a value that violates the min property will have a matTimepickerMin errora value that violates the max property will have a matTimepickerMax errora value that can not be parsed will have a matTimepickerParse error"
  },
  {
    "breadcrumbs": [
      "Usage"
    ],
    "pageType": "guide",
    "title": "Usage",
    "section": "Input and change events",
    "route": "/usage",
    "fragment": "input-and-change-events",
    "content": "The input's native (input) and (change) events will only trigger due to user interaction with the input element; they will not fire when the user selects a time from the timepicker popup. Therefore, the timepicker input also has support for (timeInput) and (timeChange) events. These trigger when the user interacts with either the input or the popup. The (timeInput) event will fire whenever the value changes due to the user typing or selecting a time from the timepicker. The (timeChange) event will fire whenever the user finishes typing input (on   blur), or when the user chooses a time from the timepicker."
  },
  {
    "breadcrumbs": [
      "Usage"
    ],
    "pageType": "guide",
    "title": "Usage",
    "section": "Disabling parts of the timepicker",
    "route": "/usage",
    "fragment": "disabling-parts-of-the-timepicker",
    "content": "As with any standard  , it is possible to disable the timepicker input by adding the disabled property. By default, the "
  },
  {
    "breadcrumbs": [
      "Usage"
    ],
    "pageType": "guide",
    "title": "Usage",
    "section": "Disabling parts of the timepicker",
    "route": "/usage",
    "fragment": "disabling-parts-of-the-timepicker",
    "content": " and "
  },
  {
    "breadcrumbs": [
      "Usage"
    ],
    "pageType": "guide",
    "title": "Usage",
    "section": "Disabling parts of the timepicker",
    "route": "/usage",
    "fragment": "disabling-parts-of-the-timepicker",
    "content": " will inherit their disabled state from the  , but this can be overridden by setting the disabled property on the timepicker or toggle elements. This can be useful if you want to disable text input but allow selection via the timepicker or vice-versa."
  },
  {
    "breadcrumbs": [
      "Usage"
    ],
    "pageType": "guide",
    "title": "Usage",
    "section": "Confirmation action buttons",
    "route": "/usage",
    "fragment": "confirmation-action-buttons",
    "content": "By default, the timepicker uses \"OK\" and \"Cancel\" buttons. If you want to change default buttons, you can "
  },
  {
    "breadcrumbs": [
      "Usage"
    ],
    "pageType": "guide",
    "title": "Usage",
    "section": "Confirmation action buttons",
    "route": "/usage",
    "fragment": "confirmation-action-buttons",
    "content": " element inside "
  },
  {
    "breadcrumbs": [
      "Usage"
    ],
    "pageType": "guide",
    "title": "Usage",
    "section": "Confirmation action buttons",
    "route": "/usage",
    "fragment": "confirmation-action-buttons",
    "content": " with with own buttons marked with the matTimepickerCancel and matTimepickerApply attributes respectively. Doing so will replace default buttons by yours."
  },
  {
    "breadcrumbs": [
      "Usage"
    ],
    "pageType": "guide",
    "title": "Usage",
    "section": "Touch UI mode",
    "route": "/usage",
    "fragment": "touch-ui-mode",
    "content": "The timepicker normally opens as a popup under the input. However this is not ideal for touch devices that don't have as much screen real estate and need bigger click targets. For this reason "
  },
  {
    "breadcrumbs": [
      "Usage"
    ],
    "pageType": "guide",
    "title": "Usage",
    "section": "Touch UI mode",
    "route": "/usage",
    "fragment": "touch-ui-mode",
    "content": " has a touchUi property that can be set to true in order to enable a more touch friendly UI where the timepicker opens in a dialog and has a larger elements. Applied for dial mode only."
  },
  {
    "breadcrumbs": [
      "Usage"
    ],
    "pageType": "guide",
    "title": "Usage",
    "section": "Manually open and close the timepicker",
    "route": "/usage",
    "fragment": "manually-open-and-close-the-timepicker",
    "content": "The timepicker popup can be programmatically controlled using the open and close methods on the "
  },
  {
    "breadcrumbs": [
      "Usage"
    ],
    "pageType": "guide",
    "title": "Usage",
    "section": "Manually open and close the timepicker",
    "route": "/usage",
    "fragment": "manually-open-and-close-the-timepicker",
    "content": ". It also has an opened property that reflects the status of the popup."
  },
  {
    "breadcrumbs": [
      "Usage"
    ],
    "pageType": "guide",
    "title": "Usage",
    "section": "Using inline style",
    "route": "/usage",
    "fragment": "using-inline-style",
    "content": "If you want to allow the user to select a time from the timepicker that is inlined on the page rather than contained in a popup, you can use "
  },
  {
    "breadcrumbs": [
      "Usage"
    ],
    "pageType": "guide",
    "title": "Usage",
    "section": "Using inline style",
    "route": "/usage",
    "fragment": "using-inline-style",
    "content": " or "
  },
  {
    "breadcrumbs": [
      "Usage"
    ],
    "pageType": "guide",
    "title": "Usage",
    "section": "Using inline style",
    "route": "/usage",
    "fragment": "using-inline-style",
    "content": " directly."
  },
  {
    "breadcrumbs": [
      "Usage"
    ],
    "pageType": "guide",
    "title": "Usage",
    "section": "Internationalization",
    "route": "/usage",
    "fragment": "internationalization",
    "content": "By default, the MAT_TIME_LOCALE injection token will use the existing LOCALE_ID locale code from @angular/core. If you want to override it, you can provide a new value for the MAT_TIME_LOCALE token: It's also possible to set the locale at runtime using the setLocale method of the TimeAdapter."
  },
  {
    "breadcrumbs": [
      "Usage"
    ],
    "pageType": "guide",
    "title": "Usage",
    "section": "Localizing labels and messages",
    "route": "/usage",
    "fragment": "localizing-labels-and-messages",
    "content": "The various text strings used by the timepicker are provided through MatTimepickerIntl. Localization of these messages can be done by providing a subclass with translated values in your application root module."
  },
  {
    "breadcrumbs": [
      "What is ngx-mat-timepicker?"
    ],
    "pageType": "guide",
    "title": "What is ngx-mat-timepicker?",
    "section": "What is ngx-mat-timepicker?",
    "route": "/what-is",
    "fragment": "what-is-ngx-mat-timepicker",
    "content": "ngx-mat-timepicker is a library which allow you to use timepicker for your Angular project. It's based on @angular/material and uses features from it."
  },
  {
    "breadcrumbs": [
      "What is ngx-mat-timepicker?"
    ],
    "pageType": "guide",
    "title": "What is ngx-mat-timepicker?",
    "section": "Motivation",
    "route": "/what-is",
    "fragment": "motivation",
    "content": "While working on some projects I needed to add a field with time choosing. As I used @angular/material it should be compatible with that by functionality and design. Unfortunately, a lot of libraries were out of date, had not the best UI or thier functionality didn't suit my project, had some bugs. I could choose from literally 2 libraries and none of them satisfied me completelly. I won't talk about exact libraries, some of them you might know. In my understanding, ngx-mat-timepicker should use @angular/material ecosystem, features and themization, suits material design as much as possible. It should give the impression that it's part of @angular/material but not a separate library. So, good UX and DX were the goal. Hence, the desire to create a library that would correspond all these criterias above, with intuitive integration with the project and good customization."
  },
  {
    "breadcrumbs": [
      "What is ngx-mat-timepicker?"
    ],
    "pageType": "guide",
    "title": "What is ngx-mat-timepicker?",
    "section": "How does it work?",
    "route": "/what-is",
    "fragment": "how-does-it-work",
    "content": "ngx-mat-timepicker contains module with all necessary components and another module with time adapter (uses native JS date under the hood). Adapter is used to unify the work with time. You can create your own adapter with any library to handle time. You have to import both modules, add theme style and use it by the same way as you use mat-datepicker. That's it!"
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "provideNativeDateTimeAdapter"
    ],
    "pageType": "api",
    "title": "provideNativeDateTimeAdapter",
    "section": "provideNativeDateTimeAdapter",
    "route": "/api/api/functions/provideNativeDateTimeAdapter",
    "fragment": "providenativedatetimeadapter"
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "NativeDateTimeModule"
    ],
    "pageType": "api",
    "title": "NativeDateTimeModule",
    "section": "NativeDateTimeModule",
    "route": "/api/api/classes/NativeDateTimeModule",
    "fragment": "nativedatetimemodule"
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatNativeDateTimeModule"
    ],
    "pageType": "api",
    "title": "MatNativeDateTimeModule",
    "section": "MatNativeDateTimeModule",
    "route": "/api/api/classes/MatNativeDateTimeModule",
    "fragment": "matnativedatetimemodule"
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MAT_DATE_TIME_LOCALE_FACTORY"
    ],
    "pageType": "api",
    "title": "MAT_DATE_TIME_LOCALE_FACTORY",
    "section": "MAT_DATE_TIME_LOCALE_FACTORY",
    "route": "/api/api/functions/MAT_DATE_TIME_LOCALE_FACTORY",
    "fragment": "mat_date_time_locale_factory"
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MAT_TIME_LOCALE"
    ],
    "pageType": "api",
    "title": "MAT_TIME_LOCALE",
    "section": "MAT_TIME_LOCALE",
    "route": "/api/api/variables/MAT_TIME_LOCALE",
    "fragment": "mat_time_locale",
    "content": "InjectionToken for timepicker that can be used to override default locale code."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MAT_TIME_LOCALE_PROVIDER"
    ],
    "pageType": "api",
    "title": "MAT_TIME_LOCALE_PROVIDER",
    "section": "MAT_TIME_LOCALE_PROVIDER",
    "route": "/api/api/variables/MAT_TIME_LOCALE_PROVIDER",
    "fragment": "mat_time_locale_provider",
    "content": "No longer needed since MAT_TIME_LOCALE has been changed to a scoped injectable. If you are importing and providing this in your code you can simply remove it."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "TimeAdapter"
    ],
    "pageType": "api",
    "title": "TimeAdapter",
    "section": "TimeAdapter",
    "route": "/api/api/classes/TimeAdapter",
    "fragment": "timeadapter"
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "TimeAdapter"
    ],
    "pageType": "api",
    "title": "TimeAdapter",
    "section": "Properties",
    "route": "/api/api/classes/TimeAdapter",
    "fragment": "properties",
    "content": "The locale to use for time."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "TimeAdapter"
    ],
    "pageType": "api",
    "title": "TimeAdapter",
    "section": "Methods",
    "route": "/api/api/classes/TimeAdapter",
    "fragment": "methods",
    "content": "Clamp the given time between min and max time."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "TimeAdapter"
    ],
    "pageType": "api",
    "title": "TimeAdapter",
    "section": "Methods",
    "route": "/api/api/classes/TimeAdapter",
    "fragment": "methods",
    "content": "The time to clamp."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "TimeAdapter"
    ],
    "pageType": "api",
    "title": "TimeAdapter",
    "section": "Methods",
    "route": "/api/api/classes/TimeAdapter",
    "fragment": "methods",
    "content": "The minimum value to allow. If null or omitted no min is enforced."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "TimeAdapter"
    ],
    "pageType": "api",
    "title": "TimeAdapter",
    "section": "Methods",
    "route": "/api/api/classes/TimeAdapter",
    "fragment": "methods",
    "content": "The maximum value to allow. If null or omitted no max is enforced."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "TimeAdapter"
    ],
    "pageType": "api",
    "title": "TimeAdapter",
    "section": "Methods",
    "route": "/api/api/classes/TimeAdapter",
    "fragment": "methods",
    "content": "Compares two time."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "TimeAdapter"
    ],
    "pageType": "api",
    "title": "TimeAdapter",
    "section": "Methods",
    "route": "/api/api/classes/TimeAdapter",
    "fragment": "methods",
    "content": "The first time to compare."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "TimeAdapter"
    ],
    "pageType": "api",
    "title": "TimeAdapter",
    "section": "Methods",
    "route": "/api/api/classes/TimeAdapter",
    "fragment": "methods",
    "content": "The second time to compare."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "TimeAdapter"
    ],
    "pageType": "api",
    "title": "TimeAdapter",
    "section": "Methods",
    "route": "/api/api/classes/TimeAdapter",
    "fragment": "methods",
    "content": "Attempts to deserialize a value to a valid time object. The "
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "TimeAdapter"
    ],
    "pageType": "api",
    "title": "TimeAdapter",
    "section": "Methods",
    "route": "/api/api/classes/TimeAdapter",
    "fragment": "methods",
    "content": " will call this method on all of its @Input() properties that accept time. It is therefore possible to support passing values from your backend directly to these properties by overriding this method to also deserialize the format used by your backend."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "TimeAdapter"
    ],
    "pageType": "api",
    "title": "TimeAdapter",
    "section": "Methods",
    "route": "/api/api/classes/TimeAdapter",
    "fragment": "methods",
    "content": "The value to be deserialized into a time object."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "TimeAdapter"
    ],
    "pageType": "api",
    "title": "TimeAdapter",
    "section": "Methods",
    "route": "/api/api/classes/TimeAdapter",
    "fragment": "methods",
    "content": "Formats a time as a string according to the given format."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "TimeAdapter"
    ],
    "pageType": "api",
    "title": "TimeAdapter",
    "section": "Methods",
    "route": "/api/api/classes/TimeAdapter",
    "fragment": "methods",
    "content": "The value to format."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "TimeAdapter"
    ],
    "pageType": "api",
    "title": "TimeAdapter",
    "section": "Methods",
    "route": "/api/api/classes/TimeAdapter",
    "fragment": "methods",
    "content": "The format to use to display the time as a string."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "TimeAdapter"
    ],
    "pageType": "api",
    "title": "TimeAdapter",
    "section": "Methods",
    "route": "/api/api/classes/TimeAdapter",
    "fragment": "methods",
    "content": "Gets the hour component of the given time."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "TimeAdapter"
    ],
    "pageType": "api",
    "title": "TimeAdapter",
    "section": "Methods",
    "route": "/api/api/classes/TimeAdapter",
    "fragment": "methods",
    "content": "The time to extract the hour from."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "TimeAdapter"
    ],
    "pageType": "api",
    "title": "TimeAdapter",
    "section": "Methods",
    "route": "/api/api/classes/TimeAdapter",
    "fragment": "methods",
    "content": "Gets the minute component of the given time."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "TimeAdapter"
    ],
    "pageType": "api",
    "title": "TimeAdapter",
    "section": "Methods",
    "route": "/api/api/classes/TimeAdapter",
    "fragment": "methods",
    "content": "The time to extract the minute from."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "TimeAdapter"
    ],
    "pageType": "api",
    "title": "TimeAdapter",
    "section": "Methods",
    "route": "/api/api/classes/TimeAdapter",
    "fragment": "methods",
    "content": "Gets the period component of the given time."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "TimeAdapter"
    ],
    "pageType": "api",
    "title": "TimeAdapter",
    "section": "Methods",
    "route": "/api/api/classes/TimeAdapter",
    "fragment": "methods",
    "content": "The time to extract the period from."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "TimeAdapter"
    ],
    "pageType": "api",
    "title": "TimeAdapter",
    "section": "Methods",
    "route": "/api/api/classes/TimeAdapter",
    "fragment": "methods",
    "content": "Given a potential time object, returns that same time object if it is a valid time, or null if it's not a valid time."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "TimeAdapter"
    ],
    "pageType": "api",
    "title": "TimeAdapter",
    "section": "Methods",
    "route": "/api/api/classes/TimeAdapter",
    "fragment": "methods",
    "content": "The object to check."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "TimeAdapter"
    ],
    "pageType": "api",
    "title": "TimeAdapter",
    "section": "Methods",
    "route": "/api/api/classes/TimeAdapter",
    "fragment": "methods",
    "content": "Gets time instance that is not valid."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "TimeAdapter"
    ],
    "pageType": "api",
    "title": "TimeAdapter",
    "section": "Methods",
    "route": "/api/api/classes/TimeAdapter",
    "fragment": "methods",
    "content": "Checks whether the given object is considered a time instance by this timeAdapter."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "TimeAdapter"
    ],
    "pageType": "api",
    "title": "TimeAdapter",
    "section": "Methods",
    "route": "/api/api/classes/TimeAdapter",
    "fragment": "methods",
    "content": "The object to check"
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "TimeAdapter"
    ],
    "pageType": "api",
    "title": "TimeAdapter",
    "section": "Methods",
    "route": "/api/api/classes/TimeAdapter",
    "fragment": "methods",
    "content": "Checks whether the given time is valid."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "TimeAdapter"
    ],
    "pageType": "api",
    "title": "TimeAdapter",
    "section": "Methods",
    "route": "/api/api/classes/TimeAdapter",
    "fragment": "methods",
    "content": "The time to check."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "TimeAdapter"
    ],
    "pageType": "api",
    "title": "TimeAdapter",
    "section": "Methods",
    "route": "/api/api/classes/TimeAdapter",
    "fragment": "methods",
    "content": "Gets now's time."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "TimeAdapter"
    ],
    "pageType": "api",
    "title": "TimeAdapter",
    "section": "Methods",
    "route": "/api/api/classes/TimeAdapter",
    "fragment": "methods",
    "content": "Parses a time from a user-provided value."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "TimeAdapter"
    ],
    "pageType": "api",
    "title": "TimeAdapter",
    "section": "Methods",
    "route": "/api/api/classes/TimeAdapter",
    "fragment": "methods",
    "content": "The value to parse."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "TimeAdapter"
    ],
    "pageType": "api",
    "title": "TimeAdapter",
    "section": "Methods",
    "route": "/api/api/classes/TimeAdapter",
    "fragment": "methods",
    "content": "The expected format of the value being parsed (type is implementation-dependent)."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "TimeAdapter"
    ],
    "pageType": "api",
    "title": "TimeAdapter",
    "section": "Methods",
    "route": "/api/api/classes/TimeAdapter",
    "fragment": "methods",
    "content": "Checks if two time are equal."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "TimeAdapter"
    ],
    "pageType": "api",
    "title": "TimeAdapter",
    "section": "Methods",
    "route": "/api/api/classes/TimeAdapter",
    "fragment": "methods",
    "content": "The first time to check."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "TimeAdapter"
    ],
    "pageType": "api",
    "title": "TimeAdapter",
    "section": "Methods",
    "route": "/api/api/classes/TimeAdapter",
    "fragment": "methods",
    "content": "The second time to check."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "TimeAdapter"
    ],
    "pageType": "api",
    "title": "TimeAdapter",
    "section": "Methods",
    "route": "/api/api/classes/TimeAdapter",
    "fragment": "methods",
    "content": "Sets the locale used for all time."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "TimeAdapter"
    ],
    "pageType": "api",
    "title": "TimeAdapter",
    "section": "Methods",
    "route": "/api/api/classes/TimeAdapter",
    "fragment": "methods",
    "content": "The new locale."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "TimeAdapter"
    ],
    "pageType": "api",
    "title": "TimeAdapter",
    "section": "Methods",
    "route": "/api/api/classes/TimeAdapter",
    "fragment": "methods",
    "content": "Update the hour component of the given time."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "TimeAdapter"
    ],
    "pageType": "api",
    "title": "TimeAdapter",
    "section": "Methods",
    "route": "/api/api/classes/TimeAdapter",
    "fragment": "methods",
    "content": "The time to update the hour."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "TimeAdapter"
    ],
    "pageType": "api",
    "title": "TimeAdapter",
    "section": "Methods",
    "route": "/api/api/classes/TimeAdapter",
    "fragment": "methods",
    "content": "The new hour to update given time."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "TimeAdapter"
    ],
    "pageType": "api",
    "title": "TimeAdapter",
    "section": "Methods",
    "route": "/api/api/classes/TimeAdapter",
    "fragment": "methods",
    "content": "Update the minute component of the given time."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "TimeAdapter"
    ],
    "pageType": "api",
    "title": "TimeAdapter",
    "section": "Methods",
    "route": "/api/api/classes/TimeAdapter",
    "fragment": "methods",
    "content": "The time to update the minute."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "TimeAdapter"
    ],
    "pageType": "api",
    "title": "TimeAdapter",
    "section": "Methods",
    "route": "/api/api/classes/TimeAdapter",
    "fragment": "methods",
    "content": "The new minute to update given time."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "NativeDateTimeAdapter"
    ],
    "pageType": "api",
    "title": "NativeDateTimeAdapter",
    "section": "NativeDateTimeAdapter",
    "route": "/api/api/classes/NativeDateTimeAdapter",
    "fragment": "nativedatetimeadapter",
    "content": "Adapts the native JS Date for components that work with time."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "NativeDateTimeAdapter"
    ],
    "pageType": "api",
    "title": "NativeDateTimeAdapter",
    "section": "Properties",
    "route": "/api/api/classes/NativeDateTimeAdapter",
    "fragment": "properties",
    "content": "The locale to use for time."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "NativeDateTimeAdapter"
    ],
    "pageType": "api",
    "title": "NativeDateTimeAdapter",
    "section": "Methods",
    "route": "/api/api/classes/NativeDateTimeAdapter",
    "fragment": "methods",
    "content": "Clamp the given time between min and max time."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "NativeDateTimeAdapter"
    ],
    "pageType": "api",
    "title": "NativeDateTimeAdapter",
    "section": "Methods",
    "route": "/api/api/classes/NativeDateTimeAdapter",
    "fragment": "methods",
    "content": "The time to clamp."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "NativeDateTimeAdapter"
    ],
    "pageType": "api",
    "title": "NativeDateTimeAdapter",
    "section": "Methods",
    "route": "/api/api/classes/NativeDateTimeAdapter",
    "fragment": "methods",
    "content": "The minimum value to allow. If null or omitted no min is enforced."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "NativeDateTimeAdapter"
    ],
    "pageType": "api",
    "title": "NativeDateTimeAdapter",
    "section": "Methods",
    "route": "/api/api/classes/NativeDateTimeAdapter",
    "fragment": "methods",
    "content": "The maximum value to allow. If null or omitted no max is enforced."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "NativeDateTimeAdapter"
    ],
    "pageType": "api",
    "title": "NativeDateTimeAdapter",
    "section": "Methods",
    "route": "/api/api/classes/NativeDateTimeAdapter",
    "fragment": "methods",
    "content": "Compares two time."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "NativeDateTimeAdapter"
    ],
    "pageType": "api",
    "title": "NativeDateTimeAdapter",
    "section": "Methods",
    "route": "/api/api/classes/NativeDateTimeAdapter",
    "fragment": "methods",
    "content": "The first time to compare."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "NativeDateTimeAdapter"
    ],
    "pageType": "api",
    "title": "NativeDateTimeAdapter",
    "section": "Methods",
    "route": "/api/api/classes/NativeDateTimeAdapter",
    "fragment": "methods",
    "content": "The second time to compare."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "NativeDateTimeAdapter"
    ],
    "pageType": "api",
    "title": "NativeDateTimeAdapter",
    "section": "Methods",
    "route": "/api/api/classes/NativeDateTimeAdapter",
    "fragment": "methods",
    "content": "Returns the given value if given a valid Date or null. Deserializes valid ISO 8601 strings (https://www.ietf.org/rfc/rfc3339.txt) into valid Dates and empty string into null. Returns an invalid date for all other values."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "NativeDateTimeAdapter"
    ],
    "pageType": "api",
    "title": "NativeDateTimeAdapter",
    "section": "Methods",
    "route": "/api/api/classes/NativeDateTimeAdapter",
    "fragment": "methods",
    "content": "Formats a time as a string according to the given format."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "NativeDateTimeAdapter"
    ],
    "pageType": "api",
    "title": "NativeDateTimeAdapter",
    "section": "Methods",
    "route": "/api/api/classes/NativeDateTimeAdapter",
    "fragment": "methods",
    "content": "The format to use to display the time as a string."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "NativeDateTimeAdapter"
    ],
    "pageType": "api",
    "title": "NativeDateTimeAdapter",
    "section": "Methods",
    "route": "/api/api/classes/NativeDateTimeAdapter",
    "fragment": "methods",
    "content": "Gets the hour component of the given time."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "NativeDateTimeAdapter"
    ],
    "pageType": "api",
    "title": "NativeDateTimeAdapter",
    "section": "Methods",
    "route": "/api/api/classes/NativeDateTimeAdapter",
    "fragment": "methods",
    "content": "Gets the minute component of the given time."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "NativeDateTimeAdapter"
    ],
    "pageType": "api",
    "title": "NativeDateTimeAdapter",
    "section": "Methods",
    "route": "/api/api/classes/NativeDateTimeAdapter",
    "fragment": "methods",
    "content": "Gets the period component of the given time."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "NativeDateTimeAdapter"
    ],
    "pageType": "api",
    "title": "NativeDateTimeAdapter",
    "section": "Methods",
    "route": "/api/api/classes/NativeDateTimeAdapter",
    "fragment": "methods",
    "content": "Given a potential time object, returns that same time object if it is a valid time, or null if it's not a valid time."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "NativeDateTimeAdapter"
    ],
    "pageType": "api",
    "title": "NativeDateTimeAdapter",
    "section": "Methods",
    "route": "/api/api/classes/NativeDateTimeAdapter",
    "fragment": "methods",
    "content": "The object to check."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "NativeDateTimeAdapter"
    ],
    "pageType": "api",
    "title": "NativeDateTimeAdapter",
    "section": "Methods",
    "route": "/api/api/classes/NativeDateTimeAdapter",
    "fragment": "methods",
    "content": "Gets time instance that is not valid."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "NativeDateTimeAdapter"
    ],
    "pageType": "api",
    "title": "NativeDateTimeAdapter",
    "section": "Methods",
    "route": "/api/api/classes/NativeDateTimeAdapter",
    "fragment": "methods",
    "content": "Checks whether the given object is considered a time instance by this timeAdapter."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "NativeDateTimeAdapter"
    ],
    "pageType": "api",
    "title": "NativeDateTimeAdapter",
    "section": "Methods",
    "route": "/api/api/classes/NativeDateTimeAdapter",
    "fragment": "methods",
    "content": "The object to check"
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "NativeDateTimeAdapter"
    ],
    "pageType": "api",
    "title": "NativeDateTimeAdapter",
    "section": "Methods",
    "route": "/api/api/classes/NativeDateTimeAdapter",
    "fragment": "methods",
    "content": "Checks whether the given time is valid."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "NativeDateTimeAdapter"
    ],
    "pageType": "api",
    "title": "NativeDateTimeAdapter",
    "section": "Methods",
    "route": "/api/api/classes/NativeDateTimeAdapter",
    "fragment": "methods",
    "content": "Gets now's time."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "NativeDateTimeAdapter"
    ],
    "pageType": "api",
    "title": "NativeDateTimeAdapter",
    "section": "Methods",
    "route": "/api/api/classes/NativeDateTimeAdapter",
    "fragment": "methods",
    "content": "Parses a time from a user-provided value."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "NativeDateTimeAdapter"
    ],
    "pageType": "api",
    "title": "NativeDateTimeAdapter",
    "section": "Methods",
    "route": "/api/api/classes/NativeDateTimeAdapter",
    "fragment": "methods",
    "content": "The value to parse."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "NativeDateTimeAdapter"
    ],
    "pageType": "api",
    "title": "NativeDateTimeAdapter",
    "section": "Methods",
    "route": "/api/api/classes/NativeDateTimeAdapter",
    "fragment": "methods",
    "content": "The expected format of the value being parsed (type is implementation-dependent)."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "NativeDateTimeAdapter"
    ],
    "pageType": "api",
    "title": "NativeDateTimeAdapter",
    "section": "Methods",
    "route": "/api/api/classes/NativeDateTimeAdapter",
    "fragment": "methods",
    "content": "Checks if two time are equal."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "NativeDateTimeAdapter"
    ],
    "pageType": "api",
    "title": "NativeDateTimeAdapter",
    "section": "Methods",
    "route": "/api/api/classes/NativeDateTimeAdapter",
    "fragment": "methods",
    "content": "The first time to check."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "NativeDateTimeAdapter"
    ],
    "pageType": "api",
    "title": "NativeDateTimeAdapter",
    "section": "Methods",
    "route": "/api/api/classes/NativeDateTimeAdapter",
    "fragment": "methods",
    "content": "The second time to check."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "NativeDateTimeAdapter"
    ],
    "pageType": "api",
    "title": "NativeDateTimeAdapter",
    "section": "Methods",
    "route": "/api/api/classes/NativeDateTimeAdapter",
    "fragment": "methods",
    "content": "Sets the locale used for all time."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "NativeDateTimeAdapter"
    ],
    "pageType": "api",
    "title": "NativeDateTimeAdapter",
    "section": "Methods",
    "route": "/api/api/classes/NativeDateTimeAdapter",
    "fragment": "methods",
    "content": "The new locale."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "NativeDateTimeAdapter"
    ],
    "pageType": "api",
    "title": "NativeDateTimeAdapter",
    "section": "Methods",
    "route": "/api/api/classes/NativeDateTimeAdapter",
    "fragment": "methods",
    "content": "Update the hour component of the given time."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "NativeDateTimeAdapter"
    ],
    "pageType": "api",
    "title": "NativeDateTimeAdapter",
    "section": "Methods",
    "route": "/api/api/classes/NativeDateTimeAdapter",
    "fragment": "methods",
    "content": "The new hour to update given time."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "NativeDateTimeAdapter"
    ],
    "pageType": "api",
    "title": "NativeDateTimeAdapter",
    "section": "Methods",
    "route": "/api/api/classes/NativeDateTimeAdapter",
    "fragment": "methods",
    "content": "Update the minute component of the given time."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "NativeDateTimeAdapter"
    ],
    "pageType": "api",
    "title": "NativeDateTimeAdapter",
    "section": "Methods",
    "route": "/api/api/classes/NativeDateTimeAdapter",
    "fragment": "methods",
    "content": "The new minute to update given time."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "enterLeaveAnimation"
    ],
    "pageType": "api",
    "title": "enterLeaveAnimation",
    "section": "enterLeaveAnimation",
    "route": "/api/api/variables/enterLeaveAnimation",
    "fragment": "enterleaveanimation"
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatDialView"
    ],
    "pageType": "api",
    "title": "MatDialView",
    "section": "MatDialView",
    "route": "/api/api/type-aliases/MatDialView",
    "fragment": "matdialview"
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatClockDials"
    ],
    "pageType": "api",
    "title": "MatClockDials",
    "section": "MatClockDials",
    "route": "/api/api/classes/MatClockDials",
    "fragment": "matclockdials"
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatClockDials"
    ],
    "pageType": "api",
    "title": "MatClockDials",
    "section": "Properties",
    "route": "/api/api/classes/MatClockDials",
    "fragment": "properties",
    "content": "Emits when any hour, minute or period is selected."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatClockDials"
    ],
    "pageType": "api",
    "title": "MatClockDials",
    "section": "Properties",
    "route": "/api/api/classes/MatClockDials",
    "fragment": "properties",
    "content": "Color palette."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatClockDials"
    ],
    "pageType": "api",
    "title": "MatClockDials",
    "section": "Properties",
    "route": "/api/api/classes/MatClockDials",
    "fragment": "properties",
    "content": "Whether the clock uses 12 hour format."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatClockDials"
    ],
    "pageType": "api",
    "title": "MatClockDials",
    "section": "Properties",
    "route": "/api/api/classes/MatClockDials",
    "fragment": "properties",
    "content": "Layout orientation."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatClockDials"
    ],
    "pageType": "api",
    "title": "MatClockDials",
    "section": "Properties",
    "route": "/api/api/classes/MatClockDials",
    "fragment": "properties",
    "content": "Whether the timepicker UI is in touch mode."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatClockDials"
    ],
    "pageType": "api",
    "title": "MatClockDials",
    "section": "Accessors",
    "route": "/api/api/classes/MatClockDials",
    "fragment": "accessors",
    "content": "The maximum selectable time."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatClockDials"
    ],
    "pageType": "api",
    "title": "MatClockDials",
    "section": "Accessors",
    "route": "/api/api/classes/MatClockDials",
    "fragment": "accessors",
    "content": "The minimum selectable time."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatClockDials"
    ],
    "pageType": "api",
    "title": "MatClockDials",
    "section": "Accessors",
    "route": "/api/api/classes/MatClockDials",
    "fragment": "accessors",
    "content": "Step over minutes."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatClockDials"
    ],
    "pageType": "api",
    "title": "MatClockDials",
    "section": "Accessors",
    "route": "/api/api/classes/MatClockDials",
    "fragment": "accessors",
    "content": "The currently selected time."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatClockDials"
    ],
    "pageType": "api",
    "title": "MatClockDials",
    "section": "Methods",
    "route": "/api/api/classes/MatClockDials",
    "fragment": "methods",
    "content": "Handles hour selection."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatClockDials"
    ],
    "pageType": "api",
    "title": "MatClockDials",
    "section": "Methods",
    "route": "/api/api/classes/MatClockDials",
    "fragment": "methods",
    "content": "Handles hour selection."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatClockDials"
    ],
    "pageType": "api",
    "title": "MatClockDials",
    "section": "Methods",
    "route": "/api/api/classes/MatClockDials",
    "fragment": "methods",
    "content": "Handles minute selection."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatClockDials"
    ],
    "pageType": "api",
    "title": "MatClockDials",
    "section": "Methods",
    "route": "/api/api/classes/MatClockDials",
    "fragment": "methods",
    "content": "Handles period changing."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatClockDials"
    ],
    "pageType": "api",
    "title": "MatClockDials",
    "section": "Methods",
    "route": "/api/api/classes/MatClockDials",
    "fragment": "methods",
    "content": "Focuses the active cell after or input the microtask queue is empty. Adding a 0ms setTimeout seems to fix Voiceover losing focus when pressing PageUp/PageDown. Determined a 0ms by gradually increasing duration from 0 and testing two use cases with screen reader enabled:"
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatClockDials"
    ],
    "pageType": "api",
    "title": "MatClockDials",
    "section": "Methods",
    "route": "/api/api/classes/MatClockDials",
    "fragment": "methods",
    "content": "Pressing PageUp/PageDown repeatedly with pausing between each key press. Pressing and holding the PageDown key with repeated keys enabled."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatClockDials"
    ],
    "pageType": "api",
    "title": "MatClockDials",
    "section": "Methods",
    "route": "/api/api/classes/MatClockDials",
    "fragment": "methods",
    "content": "Test 1 worked roughly 95-99% of the time with 0ms and got a little bit better as the duration increased. Test 2 got slightly better until the duration was long enough to interfere with repeated keys. If the repeated key speed was faster than the timeout duration, then pressing and holding pagedown caused the entire page to scroll. Since repeated key speed can verify across machines, determined that any duration could potentially interfere with repeated keys. 0ms would be best because it almost entirely eliminates the focus being lost in Voiceover without causing unintended side effects. Adding delay also complicates writing tests."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatClockDials"
    ],
    "pageType": "api",
    "title": "MatClockDials",
    "section": "Methods",
    "route": "/api/api/classes/MatClockDials",
    "fragment": "methods",
    "content": "Changes clock dial view."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "ClockDialViewCell"
    ],
    "pageType": "api",
    "title": "ClockDialViewCell",
    "section": "ClockDialViewCell",
    "route": "/api/api/interfaces/ClockDialViewCell",
    "fragment": "clockdialviewcell"
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "ALL_HOURS"
    ],
    "pageType": "api",
    "title": "ALL_HOURS",
    "section": "ALL_HOURS",
    "route": "/api/api/variables/ALL_HOURS",
    "fragment": "all_hours"
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatHoursClockDial"
    ],
    "pageType": "api",
    "title": "MatHoursClockDial",
    "section": "MatHoursClockDial",
    "route": "/api/api/classes/MatHoursClockDial",
    "fragment": "mathoursclockdial"
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatHoursClockDial"
    ],
    "pageType": "api",
    "title": "MatHoursClockDial",
    "section": "Properties",
    "route": "/api/api/classes/MatHoursClockDial",
    "fragment": "properties",
    "content": "Color palette."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatHoursClockDial"
    ],
    "pageType": "api",
    "title": "MatHoursClockDial",
    "section": "Properties",
    "route": "/api/api/classes/MatHoursClockDial",
    "fragment": "properties",
    "content": "Emits selected hour."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatHoursClockDial"
    ],
    "pageType": "api",
    "title": "MatHoursClockDial",
    "section": "Accessors",
    "route": "/api/api/classes/MatHoursClockDial",
    "fragment": "accessors",
    "content": "Whether the clock uses 12 hour format."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatHoursClockDial"
    ],
    "pageType": "api",
    "title": "MatHoursClockDial",
    "section": "Accessors",
    "route": "/api/api/classes/MatHoursClockDial",
    "fragment": "accessors",
    "content": "Selected hour."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatHoursClockDial"
    ],
    "pageType": "api",
    "title": "MatHoursClockDial",
    "section": "Accessors",
    "route": "/api/api/classes/MatHoursClockDial",
    "fragment": "accessors",
    "content": "Whether the timepicker UI is in touch mode."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatHoursClockDial"
    ],
    "pageType": "api",
    "title": "MatHoursClockDial",
    "section": "Methods",
    "route": "/api/api/classes/MatHoursClockDial",
    "fragment": "methods",
    "content": "Hand styles based on selected hour."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatHoursClockDial"
    ],
    "pageType": "api",
    "title": "MatHoursClockDial",
    "section": "Methods",
    "route": "/api/api/classes/MatHoursClockDial",
    "fragment": "methods",
    "content": "Handles mouse and touch events on dial and document."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "ALL_MINUTES"
    ],
    "pageType": "api",
    "title": "ALL_MINUTES",
    "section": "ALL_MINUTES",
    "route": "/api/api/variables/ALL_MINUTES",
    "fragment": "all_minutes"
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatMinutesClockDial"
    ],
    "pageType": "api",
    "title": "MatMinutesClockDial",
    "section": "MatMinutesClockDial",
    "route": "/api/api/classes/MatMinutesClockDial",
    "fragment": "matminutesclockdial"
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatMinutesClockDial"
    ],
    "pageType": "api",
    "title": "MatMinutesClockDial",
    "section": "Properties",
    "route": "/api/api/classes/MatMinutesClockDial",
    "fragment": "properties",
    "content": "Color palette."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatMinutesClockDial"
    ],
    "pageType": "api",
    "title": "MatMinutesClockDial",
    "section": "Properties",
    "route": "/api/api/classes/MatMinutesClockDial",
    "fragment": "properties",
    "content": "Emits selected minute."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatMinutesClockDial"
    ],
    "pageType": "api",
    "title": "MatMinutesClockDial",
    "section": "Accessors",
    "route": "/api/api/classes/MatMinutesClockDial",
    "fragment": "accessors",
    "content": "Step over minutes."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatMinutesClockDial"
    ],
    "pageType": "api",
    "title": "MatMinutesClockDial",
    "section": "Accessors",
    "route": "/api/api/classes/MatMinutesClockDial",
    "fragment": "accessors",
    "content": "Selected minute."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatMinutesClockDial"
    ],
    "pageType": "api",
    "title": "MatMinutesClockDial",
    "section": "Accessors",
    "route": "/api/api/classes/MatMinutesClockDial",
    "fragment": "accessors",
    "content": "Whether the timepicker UI is in touch mode."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatMinutesClockDial"
    ],
    "pageType": "api",
    "title": "MatMinutesClockDial",
    "section": "Methods",
    "route": "/api/api/classes/MatMinutesClockDial",
    "fragment": "methods",
    "content": "Hand styles based on selected minute."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatMinutesClockDial"
    ],
    "pageType": "api",
    "title": "MatMinutesClockDial",
    "section": "Methods",
    "route": "/api/api/classes/MatMinutesClockDial",
    "fragment": "methods",
    "content": "Handles mouse and touch events on dial and document."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "TimepickerOrientation"
    ],
    "pageType": "api",
    "title": "TimepickerOrientation",
    "section": "TimepickerOrientation",
    "route": "/api/api/type-aliases/TimepickerOrientation",
    "fragment": "timepickerorientation",
    "content": "Possible options for the timepicker orientation (dial mode only)."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatTimeFaceBase"
    ],
    "pageType": "api",
    "title": "MatTimeFaceBase",
    "section": "MatTimeFaceBase",
    "route": "/api/api/classes/MatTimeFaceBase",
    "fragment": "mattimefacebase"
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatTimeFaceBase"
    ],
    "pageType": "api",
    "title": "MatTimeFaceBase",
    "section": "Properties",
    "route": "/api/api/classes/MatTimeFaceBase",
    "fragment": "properties",
    "content": "Emits when any hour, minute or period is selected."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatTimeFaceBase"
    ],
    "pageType": "api",
    "title": "MatTimeFaceBase",
    "section": "Properties",
    "route": "/api/api/classes/MatTimeFaceBase",
    "fragment": "properties",
    "content": "Color palette."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatTimeFaceBase"
    ],
    "pageType": "api",
    "title": "MatTimeFaceBase",
    "section": "Properties",
    "route": "/api/api/classes/MatTimeFaceBase",
    "fragment": "properties",
    "content": "Whether the clock uses 12 hour format."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatTimeFaceBase"
    ],
    "pageType": "api",
    "title": "MatTimeFaceBase",
    "section": "Accessors",
    "route": "/api/api/classes/MatTimeFaceBase",
    "fragment": "accessors",
    "content": "The maximum selectable time."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatTimeFaceBase"
    ],
    "pageType": "api",
    "title": "MatTimeFaceBase",
    "section": "Accessors",
    "route": "/api/api/classes/MatTimeFaceBase",
    "fragment": "accessors",
    "content": "The minimum selectable time."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatTimeFaceBase"
    ],
    "pageType": "api",
    "title": "MatTimeFaceBase",
    "section": "Accessors",
    "route": "/api/api/classes/MatTimeFaceBase",
    "fragment": "accessors",
    "content": "Step over minutes."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatTimeFaceBase"
    ],
    "pageType": "api",
    "title": "MatTimeFaceBase",
    "section": "Accessors",
    "route": "/api/api/classes/MatTimeFaceBase",
    "fragment": "accessors",
    "content": "The currently selected time."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatTimeFaceBase"
    ],
    "pageType": "api",
    "title": "MatTimeFaceBase",
    "section": "Methods",
    "route": "/api/api/classes/MatTimeFaceBase",
    "fragment": "methods",
    "content": "Handles hour selection."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatTimeFaceBase"
    ],
    "pageType": "api",
    "title": "MatTimeFaceBase",
    "section": "Methods",
    "route": "/api/api/classes/MatTimeFaceBase",
    "fragment": "methods",
    "content": "Handles minute selection."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatTimeFaceBase"
    ],
    "pageType": "api",
    "title": "MatTimeFaceBase",
    "section": "Methods",
    "route": "/api/api/classes/MatTimeFaceBase",
    "fragment": "methods",
    "content": "Handles period changing."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatTimeFaceBase"
    ],
    "pageType": "api",
    "title": "MatTimeFaceBase",
    "section": "Methods",
    "route": "/api/api/classes/MatTimeFaceBase",
    "fragment": "methods",
    "content": "Focuses the active cell after or input the microtask queue is empty. Adding a 0ms setTimeout seems to fix Voiceover losing focus when pressing PageUp/PageDown. Determined a 0ms by gradually increasing duration from 0 and testing two use cases with screen reader enabled:"
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatTimeFaceBase"
    ],
    "pageType": "api",
    "title": "MatTimeFaceBase",
    "section": "Methods",
    "route": "/api/api/classes/MatTimeFaceBase",
    "fragment": "methods",
    "content": "Pressing PageUp/PageDown repeatedly with pausing between each key press. Pressing and holding the PageDown key with repeated keys enabled."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatTimeFaceBase"
    ],
    "pageType": "api",
    "title": "MatTimeFaceBase",
    "section": "Methods",
    "route": "/api/api/classes/MatTimeFaceBase",
    "fragment": "methods",
    "content": "Test 1 worked roughly 95-99% of the time with 0ms and got a little bit better as the duration increased. Test 2 got slightly better until the duration was long enough to interfere with repeated keys. If the repeated key speed was faster than the timeout duration, then pressing and holding pagedown caused the entire page to scroll. Since repeated key speed can verify across machines, determined that any duration could potentially interfere with repeated keys. 0ms would be best because it almost entirely eliminates the focus being lost in Voiceover without causing unintended side effects. Adding delay also complicates writing tests."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "withZeroPrefix"
    ],
    "pageType": "api",
    "title": "withZeroPrefix",
    "section": "withZeroPrefix",
    "route": "/api/api/functions/withZeroPrefix",
    "fragment": "withzeroprefix"
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "withZeroPrefixMeridiem"
    ],
    "pageType": "api",
    "title": "withZeroPrefixMeridiem",
    "section": "withZeroPrefixMeridiem",
    "route": "/api/api/functions/withZeroPrefixMeridiem",
    "fragment": "withzeroprefixmeridiem"
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatTimeInputBase"
    ],
    "pageType": "api",
    "title": "MatTimeInputBase",
    "section": "MatTimeInputBase",
    "route": "/api/api/classes/MatTimeInputBase",
    "fragment": "mattimeinputbase"
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatHourInput"
    ],
    "pageType": "api",
    "title": "MatHourInput",
    "section": "MatHourInput",
    "route": "/api/api/classes/MatHourInput",
    "fragment": "mathourinput"
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatMinuteInput"
    ],
    "pageType": "api",
    "title": "MatMinuteInput",
    "section": "MatMinuteInput",
    "route": "/api/api/classes/MatMinuteInput",
    "fragment": "matminuteinput"
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatMinuteInput"
    ],
    "pageType": "api",
    "title": "MatMinuteInput",
    "section": "Accessors",
    "route": "/api/api/classes/MatMinuteInput",
    "fragment": "accessors",
    "content": "Step over minutes."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatTimeInputs"
    ],
    "pageType": "api",
    "title": "MatTimeInputs",
    "section": "MatTimeInputs",
    "route": "/api/api/classes/MatTimeInputs",
    "fragment": "mattimeinputs"
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatTimeInputs"
    ],
    "pageType": "api",
    "title": "MatTimeInputs",
    "section": "Properties",
    "route": "/api/api/classes/MatTimeInputs",
    "fragment": "properties",
    "content": "Emits when any hour, minute or period is selected."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatTimeInputs"
    ],
    "pageType": "api",
    "title": "MatTimeInputs",
    "section": "Properties",
    "route": "/api/api/classes/MatTimeInputs",
    "fragment": "properties",
    "content": "Color palette."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatTimeInputs"
    ],
    "pageType": "api",
    "title": "MatTimeInputs",
    "section": "Properties",
    "route": "/api/api/classes/MatTimeInputs",
    "fragment": "properties",
    "content": "Whether the clock uses 12 hour format."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatTimeInputs"
    ],
    "pageType": "api",
    "title": "MatTimeInputs",
    "section": "Accessors",
    "route": "/api/api/classes/MatTimeInputs",
    "fragment": "accessors",
    "content": "The maximum selectable time."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatTimeInputs"
    ],
    "pageType": "api",
    "title": "MatTimeInputs",
    "section": "Accessors",
    "route": "/api/api/classes/MatTimeInputs",
    "fragment": "accessors",
    "content": "The minimum selectable time."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatTimeInputs"
    ],
    "pageType": "api",
    "title": "MatTimeInputs",
    "section": "Accessors",
    "route": "/api/api/classes/MatTimeInputs",
    "fragment": "accessors",
    "content": "Step over minutes."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatTimeInputs"
    ],
    "pageType": "api",
    "title": "MatTimeInputs",
    "section": "Accessors",
    "route": "/api/api/classes/MatTimeInputs",
    "fragment": "accessors",
    "content": "The currently selected time."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatTimeInputs"
    ],
    "pageType": "api",
    "title": "MatTimeInputs",
    "section": "Methods",
    "route": "/api/api/classes/MatTimeInputs",
    "fragment": "methods",
    "content": "Handles hour selection."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatTimeInputs"
    ],
    "pageType": "api",
    "title": "MatTimeInputs",
    "section": "Methods",
    "route": "/api/api/classes/MatTimeInputs",
    "fragment": "methods",
    "content": "Handles minute selection."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatTimeInputs"
    ],
    "pageType": "api",
    "title": "MatTimeInputs",
    "section": "Methods",
    "route": "/api/api/classes/MatTimeInputs",
    "fragment": "methods",
    "content": "Handles period changing."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatTimeInputs"
    ],
    "pageType": "api",
    "title": "MatTimeInputs",
    "section": "Methods",
    "route": "/api/api/classes/MatTimeInputs",
    "fragment": "methods",
    "content": "Focuses the active cell after or input the microtask queue is empty. Adding a 0ms setTimeout seems to fix Voiceover losing focus when pressing PageUp/PageDown. Determined a 0ms by gradually increasing duration from 0 and testing two use cases with screen reader enabled:"
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatTimeInputs"
    ],
    "pageType": "api",
    "title": "MatTimeInputs",
    "section": "Methods",
    "route": "/api/api/classes/MatTimeInputs",
    "fragment": "methods",
    "content": "Pressing PageUp/PageDown repeatedly with pausing between each key press. Pressing and holding the PageDown key with repeated keys enabled."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatTimeInputs"
    ],
    "pageType": "api",
    "title": "MatTimeInputs",
    "section": "Methods",
    "route": "/api/api/classes/MatTimeInputs",
    "fragment": "methods",
    "content": "Test 1 worked roughly 95-99% of the time with 0ms and got a little bit better as the duration increased. Test 2 got slightly better until the duration was long enough to interfere with repeated keys. If the repeated key speed was faster than the timeout duration, then pressing and holding pagedown caused the entire page to scroll. Since repeated key speed can verify across machines, determined that any duration could potentially interfere with repeated keys. 0ms would be best because it almost entirely eliminates the focus being lost in Voiceover without causing unintended side effects. Adding delay also complicates writing tests."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatTimePeriodType"
    ],
    "pageType": "api",
    "title": "MatTimePeriodType",
    "section": "MatTimePeriodType",
    "route": "/api/api/type-aliases/MatTimePeriodType",
    "fragment": "mattimeperiodtype"
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatTimePeriod"
    ],
    "pageType": "api",
    "title": "MatTimePeriod",
    "section": "MatTimePeriod",
    "route": "/api/api/classes/MatTimePeriod",
    "fragment": "mattimeperiod"
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatTimePeriod"
    ],
    "pageType": "api",
    "title": "MatTimePeriod",
    "section": "Accessors",
    "route": "/api/api/classes/MatTimePeriod",
    "fragment": "accessors",
    "content": "Whether the time period is vertically aligned."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MAT_SINGLE_TIME_SELECTION_MODEL_FACTORY"
    ],
    "pageType": "api",
    "title": "MAT_SINGLE_TIME_SELECTION_MODEL_FACTORY",
    "section": "MAT_SINGLE_TIME_SELECTION_MODEL_FACTORY",
    "route": "/api/api/functions/MAT_SINGLE_TIME_SELECTION_MODEL_FACTORY",
    "fragment": "mat_single_time_selection_model_factory"
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "ExtractTimeTypeFromSelection"
    ],
    "pageType": "api",
    "title": "ExtractTimeTypeFromSelection",
    "section": "ExtractTimeTypeFromSelection",
    "route": "/api/api/type-aliases/ExtractTimeTypeFromSelection",
    "fragment": "extracttimetypefromselection"
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "TimeSelectionModelChange"
    ],
    "pageType": "api",
    "title": "TimeSelectionModelChange",
    "section": "TimeSelectionModelChange",
    "route": "/api/api/interfaces/TimeSelectionModelChange",
    "fragment": "timeselectionmodelchange",
    "content": "Event emitted by the time selection model when its selection changes. @docs-private"
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "TimeSelectionModelChange"
    ],
    "pageType": "api",
    "title": "TimeSelectionModelChange",
    "section": "Properties",
    "route": "/api/api/interfaces/TimeSelectionModelChange",
    "fragment": "properties",
    "content": "Previous value"
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "TimeSelectionModelChange"
    ],
    "pageType": "api",
    "title": "TimeSelectionModelChange",
    "section": "Properties",
    "route": "/api/api/interfaces/TimeSelectionModelChange",
    "fragment": "properties",
    "content": "New value for the selection."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "TimeSelectionModelChange"
    ],
    "pageType": "api",
    "title": "TimeSelectionModelChange",
    "section": "Properties",
    "route": "/api/api/interfaces/TimeSelectionModelChange",
    "fragment": "properties",
    "content": "Object that triggered the change."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatTimeSelectionModel"
    ],
    "pageType": "api",
    "title": "MatTimeSelectionModel",
    "section": "MatTimeSelectionModel",
    "route": "/api/api/classes/MatTimeSelectionModel",
    "fragment": "mattimeselectionmodel",
    "content": "A selection model containing a time selection."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatTimeSelectionModel"
    ],
    "pageType": "api",
    "title": "MatTimeSelectionModel",
    "section": "Properties",
    "route": "/api/api/classes/MatTimeSelectionModel",
    "fragment": "properties",
    "content": "The current selection."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatTimeSelectionModel"
    ],
    "pageType": "api",
    "title": "MatTimeSelectionModel",
    "section": "Properties",
    "route": "/api/api/classes/MatTimeSelectionModel",
    "fragment": "properties",
    "content": "Emits when the selection has changed."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatTimeSelectionModel"
    ],
    "pageType": "api",
    "title": "MatTimeSelectionModel",
    "section": "Methods",
    "route": "/api/api/classes/MatTimeSelectionModel",
    "fragment": "methods",
    "content": "Adds a time to the current selection."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatTimeSelectionModel"
    ],
    "pageType": "api",
    "title": "MatTimeSelectionModel",
    "section": "Methods",
    "route": "/api/api/classes/MatTimeSelectionModel",
    "fragment": "methods",
    "content": "Clones the selection model."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatTimeSelectionModel"
    ],
    "pageType": "api",
    "title": "MatTimeSelectionModel",
    "section": "Methods",
    "route": "/api/api/classes/MatTimeSelectionModel",
    "fragment": "methods",
    "content": "Updates the current selection in the model."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatTimeSelectionModel"
    ],
    "pageType": "api",
    "title": "MatTimeSelectionModel",
    "section": "Methods",
    "route": "/api/api/classes/MatTimeSelectionModel",
    "fragment": "methods",
    "content": "New selection that should be assigned."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatTimeSelectionModel"
    ],
    "pageType": "api",
    "title": "MatTimeSelectionModel",
    "section": "Methods",
    "route": "/api/api/classes/MatTimeSelectionModel",
    "fragment": "methods",
    "content": "Object that triggered the selection change."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatSingleTimeSelectionModel"
    ],
    "pageType": "api",
    "title": "MatSingleTimeSelectionModel",
    "section": "MatSingleTimeSelectionModel",
    "route": "/api/api/classes/MatSingleTimeSelectionModel",
    "fragment": "matsingletimeselectionmodel",
    "content": "A selection model that contains a single time."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatSingleTimeSelectionModel"
    ],
    "pageType": "api",
    "title": "MatSingleTimeSelectionModel",
    "section": "Properties",
    "route": "/api/api/classes/MatSingleTimeSelectionModel",
    "fragment": "properties",
    "content": "The current selection."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatSingleTimeSelectionModel"
    ],
    "pageType": "api",
    "title": "MatSingleTimeSelectionModel",
    "section": "Properties",
    "route": "/api/api/classes/MatSingleTimeSelectionModel",
    "fragment": "properties",
    "content": "Emits when the selection has changed."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatSingleTimeSelectionModel"
    ],
    "pageType": "api",
    "title": "MatSingleTimeSelectionModel",
    "section": "Methods",
    "route": "/api/api/classes/MatSingleTimeSelectionModel",
    "fragment": "methods",
    "content": "Adds a time to the current selection. In the case of a single time selection, the added time simply overwrites the previous selection"
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatSingleTimeSelectionModel"
    ],
    "pageType": "api",
    "title": "MatSingleTimeSelectionModel",
    "section": "Methods",
    "route": "/api/api/classes/MatSingleTimeSelectionModel",
    "fragment": "methods",
    "content": "Clones the selection model."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatSingleTimeSelectionModel"
    ],
    "pageType": "api",
    "title": "MatSingleTimeSelectionModel",
    "section": "Methods",
    "route": "/api/api/classes/MatSingleTimeSelectionModel",
    "fragment": "methods",
    "content": "Updates the current selection in the model."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatSingleTimeSelectionModel"
    ],
    "pageType": "api",
    "title": "MatSingleTimeSelectionModel",
    "section": "Methods",
    "route": "/api/api/classes/MatSingleTimeSelectionModel",
    "fragment": "methods",
    "content": "New selection that should be assigned."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatSingleTimeSelectionModel"
    ],
    "pageType": "api",
    "title": "MatSingleTimeSelectionModel",
    "section": "Methods",
    "route": "/api/api/classes/MatSingleTimeSelectionModel",
    "fragment": "methods",
    "content": "Object that triggered the selection change."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MAT_SINGLE_TIME_SELECTION_MODEL_PROVIDER"
    ],
    "pageType": "api",
    "title": "MAT_SINGLE_TIME_SELECTION_MODEL_PROVIDER",
    "section": "MAT_SINGLE_TIME_SELECTION_MODEL_PROVIDER",
    "route": "/api/api/variables/MAT_SINGLE_TIME_SELECTION_MODEL_PROVIDER",
    "fragment": "mat_single_time_selection_model_provider",
    "content": "Used to provide a single selection model to a component."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MAT_DEFAULT_ACITONS"
    ],
    "pageType": "api",
    "title": "MAT_DEFAULT_ACITONS",
    "section": "MAT_DEFAULT_ACITONS",
    "route": "/api/api/variables/MAT_DEFAULT_ACITONS",
    "fragment": "mat_default_acitons"
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatTimepickerApply"
    ],
    "pageType": "api",
    "title": "MatTimepickerApply",
    "section": "MatTimepickerApply",
    "route": "/api/api/classes/MatTimepickerApply",
    "fragment": "mattimepickerapply",
    "content": "Button that will close the timepicker and assign the current selection to the data model."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatTimepickerCancel"
    ],
    "pageType": "api",
    "title": "MatTimepickerCancel",
    "section": "MatTimepickerCancel",
    "route": "/api/api/classes/MatTimepickerCancel",
    "fragment": "mattimepickercancel",
    "content": "Button that will close the timepicker and discard the current selection."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatTimepickerActions"
    ],
    "pageType": "api",
    "title": "MatTimepickerActions",
    "section": "MatTimepickerActions",
    "route": "/api/api/classes/MatTimepickerActions",
    "fragment": "mattimepickeractions",
    "content": "Container that can be used to project a row of action buttons to the bottom of a timepicker."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatTimepickerDefaultActions"
    ],
    "pageType": "api",
    "title": "MatTimepickerDefaultActions",
    "section": "MatTimepickerDefaultActions",
    "route": "/api/api/classes/MatTimepickerDefaultActions",
    "fragment": "mattimepickerdefaultactions",
    "content": "Default action buttons to the bottom of a timepicker."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "matTimepickerAnimations"
    ],
    "pageType": "api",
    "title": "matTimepickerAnimations",
    "section": "matTimepickerAnimations",
    "route": "/api/api/variables/matTimepickerAnimations",
    "fragment": "mattimepickeranimations",
    "content": "Animations used by the timepicker."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "TimepickerOpenAs"
    ],
    "pageType": "api",
    "title": "TimepickerOpenAs",
    "section": "TimepickerOpenAs",
    "route": "/api/api/type-aliases/TimepickerOpenAs",
    "fragment": "timepickeropenas",
    "content": "Possible options for the timepicker to open."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "TimepickerDropdownPositionX"
    ],
    "pageType": "api",
    "title": "TimepickerDropdownPositionX",
    "section": "TimepickerDropdownPositionX",
    "route": "/api/api/type-aliases/TimepickerDropdownPositionX",
    "fragment": "timepickerdropdownpositionx",
    "content": "Possible positions for the timepicker dropdown along the X axis."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "TimepickerDropdownPositionY"
    ],
    "pageType": "api",
    "title": "TimepickerDropdownPositionY",
    "section": "TimepickerDropdownPositionY",
    "route": "/api/api/type-aliases/TimepickerDropdownPositionY",
    "fragment": "timepickerdropdownpositiony",
    "content": "Possible positions for the timepicker dropdown along the Y axis."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "TimepickerMode"
    ],
    "pageType": "api",
    "title": "TimepickerMode",
    "section": "TimepickerMode",
    "route": "/api/api/type-aliases/TimepickerMode",
    "fragment": "timepickermode",
    "content": "Possible options for the timepicker to display."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "TimepickerFormat"
    ],
    "pageType": "api",
    "title": "TimepickerFormat",
    "section": "TimepickerFormat",
    "route": "/api/api/type-aliases/TimepickerFormat",
    "fragment": "timepickerformat",
    "content": "Possible options for the timepicker period format."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatTimepickerControl"
    ],
    "pageType": "api",
    "title": "MatTimepickerControl",
    "section": "MatTimepickerControl",
    "route": "/api/api/interfaces/MatTimepickerControl",
    "fragment": "mattimepickercontrol",
    "content": "Form control that can be associated with a timepicker."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatTimepickerPanel"
    ],
    "pageType": "api",
    "title": "MatTimepickerPanel",
    "section": "MatTimepickerPanel",
    "route": "/api/api/interfaces/MatTimepickerPanel",
    "fragment": "mattimepickerpanel",
    "content": "A timepicker that can be attached to a {@link MatTimepickerControl}."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatTimepickerPanel"
    ],
    "pageType": "api",
    "title": "MatTimepickerPanel",
    "section": "Properties",
    "route": "/api/api/interfaces/MatTimepickerPanel",
    "fragment": "properties",
    "content": "Stream that emits whenever the timepicker is closed."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatTimepickerPanel"
    ],
    "pageType": "api",
    "title": "MatTimepickerPanel",
    "section": "Properties",
    "route": "/api/api/interfaces/MatTimepickerPanel",
    "fragment": "properties",
    "content": "Stream that emits whenever the timepicker is opened."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatTimepickerPanel"
    ],
    "pageType": "api",
    "title": "MatTimepickerPanel",
    "section": "Properties",
    "route": "/api/api/interfaces/MatTimepickerPanel",
    "fragment": "properties",
    "content": "Emits when the timepicker's state changes."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatTimepickerPanel"
    ],
    "pageType": "api",
    "title": "MatTimepickerPanel",
    "section": "Methods",
    "route": "/api/api/interfaces/MatTimepickerPanel",
    "fragment": "methods",
    "content": "Register an input with the timeepicker."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatTimepickerDefaultOptions"
    ],
    "pageType": "api",
    "title": "MatTimepickerDefaultOptions",
    "section": "MatTimepickerDefaultOptions",
    "route": "/api/api/interfaces/MatTimepickerDefaultOptions",
    "fragment": "mattimepickerdefaultoptions",
    "content": "Represents the default options for the form field that can be configured using the MAT_TIMEPICKER_DEFAULT_OPTIONS injection token."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatTimepickerDefaultOptions"
    ],
    "pageType": "api",
    "title": "MatTimepickerDefaultOptions",
    "section": "Properties",
    "route": "/api/api/interfaces/MatTimepickerDefaultOptions",
    "fragment": "properties",
    "content": "Default color of the timepicker."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatTimepickerDefaultOptions"
    ],
    "pageType": "api",
    "title": "MatTimepickerDefaultOptions",
    "section": "Properties",
    "route": "/api/api/interfaces/MatTimepickerDefaultOptions",
    "fragment": "properties",
    "content": "Default timepicker format."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatTimepickerDefaultOptions"
    ],
    "pageType": "api",
    "title": "MatTimepickerDefaultOptions",
    "section": "Properties",
    "route": "/api/api/interfaces/MatTimepickerDefaultOptions",
    "fragment": "properties",
    "content": "Step for minutes."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatTimepickerDefaultOptions"
    ],
    "pageType": "api",
    "title": "MatTimepickerDefaultOptions",
    "section": "Properties",
    "route": "/api/api/interfaces/MatTimepickerDefaultOptions",
    "fragment": "properties",
    "content": "Default timepicker mode."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatTimepickerDefaultOptions"
    ],
    "pageType": "api",
    "title": "MatTimepickerDefaultOptions",
    "section": "Properties",
    "route": "/api/api/interfaces/MatTimepickerDefaultOptions",
    "fragment": "properties",
    "content": "Defines how timepicker will be appeared."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatTimepickerDefaultOptions"
    ],
    "pageType": "api",
    "title": "MatTimepickerDefaultOptions",
    "section": "Properties",
    "route": "/api/api/interfaces/MatTimepickerDefaultOptions",
    "fragment": "properties",
    "content": "Orientation for dial mode."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatTimepickerDefaultOptions"
    ],
    "pageType": "api",
    "title": "MatTimepickerDefaultOptions",
    "section": "Properties",
    "route": "/api/api/interfaces/MatTimepickerDefaultOptions",
    "fragment": "properties",
    "content": "Should toggle face button be visible."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MAT_TIMEPICKER_DEFAULT_OPTIONS"
    ],
    "pageType": "api",
    "title": "MAT_TIMEPICKER_DEFAULT_OPTIONS",
    "section": "MAT_TIMEPICKER_DEFAULT_OPTIONS",
    "route": "/api/api/variables/MAT_TIMEPICKER_DEFAULT_OPTIONS",
    "fragment": "mat_timepicker_default_options",
    "content": "Injection token that can be used to configure the default options for all timepickers within an app."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatTimepickerBase"
    ],
    "pageType": "api",
    "title": "MatTimepickerBase",
    "section": "MatTimepickerBase",
    "route": "/api/api/classes/MatTimepickerBase",
    "fragment": "mattimepickerbase"
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatTimepickerBase"
    ],
    "pageType": "api",
    "title": "MatTimepickerBase",
    "section": "Properties",
    "route": "/api/api/classes/MatTimepickerBase",
    "fragment": "properties",
    "content": "Portal with projected action buttons."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatTimepickerBase"
    ],
    "pageType": "api",
    "title": "MatTimepickerBase",
    "section": "Properties",
    "route": "/api/api/classes/MatTimepickerBase",
    "fragment": "properties",
    "content": "Emits when the timepicker has been closed."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatTimepickerBase"
    ],
    "pageType": "api",
    "title": "MatTimepickerBase",
    "section": "Properties",
    "route": "/api/api/classes/MatTimepickerBase",
    "fragment": "properties",
    "content": "The id for the timepicker."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatTimepickerBase"
    ],
    "pageType": "api",
    "title": "MatTimepickerBase",
    "section": "Properties",
    "route": "/api/api/classes/MatTimepickerBase",
    "fragment": "properties",
    "content": "Emits when the timepicker has been opened."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatTimepickerBase"
    ],
    "pageType": "api",
    "title": "MatTimepickerBase",
    "section": "Properties",
    "route": "/api/api/classes/MatTimepickerBase",
    "fragment": "properties",
    "content": "Whether to restore focus to the previously-focused element when the timepicker is closed. Note that automatic focus restoration is an accessibility feature and it is recommended that you provide your own equivalent, if you decide to turn it off."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatTimepickerBase"
    ],
    "pageType": "api",
    "title": "MatTimepickerBase",
    "section": "Properties",
    "route": "/api/api/classes/MatTimepickerBase",
    "fragment": "properties",
    "content": "Emits when the timepicker's state changes."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatTimepickerBase"
    ],
    "pageType": "api",
    "title": "MatTimepickerBase",
    "section": "Properties",
    "route": "/api/api/classes/MatTimepickerBase",
    "fragment": "properties",
    "content": "The input element this timepicker is associated with."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatTimepickerBase"
    ],
    "pageType": "api",
    "title": "MatTimepickerBase",
    "section": "Properties",
    "route": "/api/api/classes/MatTimepickerBase",
    "fragment": "properties",
    "content": "Preferred position of the timepicker in the X axis."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatTimepickerBase"
    ],
    "pageType": "api",
    "title": "MatTimepickerBase",
    "section": "Properties",
    "route": "/api/api/classes/MatTimepickerBase",
    "fragment": "properties",
    "content": "Preferred position of the timepicker in the Y axis."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatTimepickerBase"
    ],
    "pageType": "api",
    "title": "MatTimepickerBase",
    "section": "Accessors",
    "route": "/api/api/classes/MatTimepickerBase",
    "fragment": "accessors",
    "content": "Color palette to use on the timepicker's content."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatTimepickerBase"
    ],
    "pageType": "api",
    "title": "MatTimepickerBase",
    "section": "Accessors",
    "route": "/api/api/classes/MatTimepickerBase",
    "fragment": "accessors",
    "content": "Whether the timepicker pop-up should be disabled."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatTimepickerBase"
    ],
    "pageType": "api",
    "title": "MatTimepickerBase",
    "section": "Accessors",
    "route": "/api/api/classes/MatTimepickerBase",
    "fragment": "accessors",
    "content": "Timepicker period format."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatTimepickerBase"
    ],
    "pageType": "api",
    "title": "MatTimepickerBase",
    "section": "Accessors",
    "route": "/api/api/classes/MatTimepickerBase",
    "fragment": "accessors",
    "content": "Step for minutes."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatTimepickerBase"
    ],
    "pageType": "api",
    "title": "MatTimepickerBase",
    "section": "Accessors",
    "route": "/api/api/classes/MatTimepickerBase",
    "fragment": "accessors",
    "content": "Timepicker display mode."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatTimepickerBase"
    ],
    "pageType": "api",
    "title": "MatTimepickerBase",
    "section": "Accessors",
    "route": "/api/api/classes/MatTimepickerBase",
    "fragment": "accessors",
    "content": "Whether the timepicker mode which determines what the timepicker will be opened as."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatTimepickerBase"
    ],
    "pageType": "api",
    "title": "MatTimepickerBase",
    "section": "Accessors",
    "route": "/api/api/classes/MatTimepickerBase",
    "fragment": "accessors",
    "content": "Whether the timepicker is open."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatTimepickerBase"
    ],
    "pageType": "api",
    "title": "MatTimepickerBase",
    "section": "Accessors",
    "route": "/api/api/classes/MatTimepickerBase",
    "fragment": "accessors",
    "content": "Orientation for dial mode."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatTimepickerBase"
    ],
    "pageType": "api",
    "title": "MatTimepickerBase",
    "section": "Accessors",
    "route": "/api/api/classes/MatTimepickerBase",
    "fragment": "accessors",
    "content": "Show or hide toggle button between dial and input."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatTimepickerBase"
    ],
    "pageType": "api",
    "title": "MatTimepickerBase",
    "section": "Accessors",
    "route": "/api/api/classes/MatTimepickerBase",
    "fragment": "accessors",
    "content": "Whether the timepicker UI is in touch mode. In touch mode elements are larger for bigger touch targets."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatTimepickerBase"
    ],
    "pageType": "api",
    "title": "MatTimepickerBase",
    "section": "Methods",
    "route": "/api/api/classes/MatTimepickerBase",
    "fragment": "methods",
    "content": "Applies the current pending selection on the overlay to the model."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatTimepickerBase"
    ],
    "pageType": "api",
    "title": "MatTimepickerBase",
    "section": "Methods",
    "route": "/api/api/classes/MatTimepickerBase",
    "fragment": "methods",
    "content": "Forwards relevant values from the timepicker to the timepicker content inside the overlay."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatTimepickerBase"
    ],
    "pageType": "api",
    "title": "MatTimepickerBase",
    "section": "Methods",
    "route": "/api/api/classes/MatTimepickerBase",
    "fragment": "methods",
    "content": "The maximum selectable time."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatTimepickerBase"
    ],
    "pageType": "api",
    "title": "MatTimepickerBase",
    "section": "Methods",
    "route": "/api/api/classes/MatTimepickerBase",
    "fragment": "methods",
    "content": "The minimum selectable time."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatTimepickerBase"
    ],
    "pageType": "api",
    "title": "MatTimepickerBase",
    "section": "Methods",
    "route": "/api/api/classes/MatTimepickerBase",
    "fragment": "methods",
    "content": "Closes the timepicker."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatTimepickerBase"
    ],
    "pageType": "api",
    "title": "MatTimepickerBase",
    "section": "Methods",
    "route": "/api/api/classes/MatTimepickerBase",
    "fragment": "methods",
    "content": "Opens the timepicker."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatTimepickerBase"
    ],
    "pageType": "api",
    "title": "MatTimepickerBase",
    "section": "Methods",
    "route": "/api/api/classes/MatTimepickerBase",
    "fragment": "methods",
    "content": "Registers a portal containing action buttons with the timepicker."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatTimepickerBase"
    ],
    "pageType": "api",
    "title": "MatTimepickerBase",
    "section": "Methods",
    "route": "/api/api/classes/MatTimepickerBase",
    "fragment": "methods",
    "content": "Portal to be registered."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatTimepickerBase"
    ],
    "pageType": "api",
    "title": "MatTimepickerBase",
    "section": "Methods",
    "route": "/api/api/classes/MatTimepickerBase",
    "fragment": "methods",
    "content": "Register an input with this timepicker."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatTimepickerBase"
    ],
    "pageType": "api",
    "title": "MatTimepickerBase",
    "section": "Methods",
    "route": "/api/api/classes/MatTimepickerBase",
    "fragment": "methods",
    "content": "The timepicker input to register with this timepicker."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatTimepickerBase"
    ],
    "pageType": "api",
    "title": "MatTimepickerBase",
    "section": "Methods",
    "route": "/api/api/classes/MatTimepickerBase",
    "fragment": "methods",
    "content": "Removes a portal containing action buttons from the timepicker."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatTimepickerBase"
    ],
    "pageType": "api",
    "title": "MatTimepickerBase",
    "section": "Methods",
    "route": "/api/api/classes/MatTimepickerBase",
    "fragment": "methods",
    "content": "Portal to be removed."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatTimepickerContentLayout"
    ],
    "pageType": "api",
    "title": "MatTimepickerContentLayout",
    "section": "MatTimepickerContentLayout",
    "route": "/api/api/classes/MatTimepickerContentLayout",
    "fragment": "mattimepickercontentlayout"
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatTimepickerContentLayout"
    ],
    "pageType": "api",
    "title": "MatTimepickerContentLayout",
    "section": "Properties",
    "route": "/api/api/classes/MatTimepickerContentLayout",
    "fragment": "properties",
    "content": "Layout orientation."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatTimepickerContentLayout"
    ],
    "pageType": "api",
    "title": "MatTimepickerContentLayout",
    "section": "Properties",
    "route": "/api/api/classes/MatTimepickerContentLayout",
    "fragment": "properties",
    "content": "Content title."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatTimepickerContent"
    ],
    "pageType": "api",
    "title": "MatTimepickerContent",
    "section": "MatTimepickerContent",
    "route": "/api/api/classes/MatTimepickerContent",
    "fragment": "mattimepickercontent"
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatTimepickerContent"
    ],
    "pageType": "api",
    "title": "MatTimepickerContent",
    "section": "Properties",
    "route": "/api/api/classes/MatTimepickerContent",
    "fragment": "properties",
    "content": "Portal with projected action buttons."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatTimepickerContent"
    ],
    "pageType": "api",
    "title": "MatTimepickerContent",
    "section": "Properties",
    "route": "/api/api/classes/MatTimepickerContent",
    "fragment": "properties",
    "content": "Emits when an animation has finished."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatTimepickerContent"
    ],
    "pageType": "api",
    "title": "MatTimepickerContent",
    "section": "Properties",
    "route": "/api/api/classes/MatTimepickerContent",
    "fragment": "properties",
    "content": "Current state of the animation."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatTimepickerContent"
    ],
    "pageType": "api",
    "title": "MatTimepickerContent",
    "section": "Properties",
    "route": "/api/api/classes/MatTimepickerContent",
    "fragment": "properties",
    "content": "Whether the close button currently has focus."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatTimepickerContent"
    ],
    "pageType": "api",
    "title": "MatTimepickerContent",
    "section": "Properties",
    "route": "/api/api/classes/MatTimepickerContent",
    "fragment": "properties",
    "content": "Text for the close button."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatTimepickerContent"
    ],
    "pageType": "api",
    "title": "MatTimepickerContent",
    "section": "Properties",
    "route": "/api/api/classes/MatTimepickerContent",
    "fragment": "properties",
    "content": "Id of the label for the role=\"dialog\" element."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatTimepickerContent"
    ],
    "pageType": "api",
    "title": "MatTimepickerContent",
    "section": "Properties",
    "route": "/api/api/classes/MatTimepickerContent",
    "fragment": "properties",
    "content": "Reference to the internal clock dials component."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatTimepickerContent"
    ],
    "pageType": "api",
    "title": "MatTimepickerContent",
    "section": "Properties",
    "route": "/api/api/classes/MatTimepickerContent",
    "fragment": "properties",
    "content": "Reference to the internal time inputs component."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatTimepickerContent"
    ],
    "pageType": "api",
    "title": "MatTimepickerContent",
    "section": "Properties",
    "route": "/api/api/classes/MatTimepickerContent",
    "fragment": "properties",
    "content": "Whether there is an in-progress animation."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatTimepickerContent"
    ],
    "pageType": "api",
    "title": "MatTimepickerContent",
    "section": "Properties",
    "route": "/api/api/classes/MatTimepickerContent",
    "fragment": "properties",
    "content": "Whether the clock uses 12 hour format."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatTimepickerContent"
    ],
    "pageType": "api",
    "title": "MatTimepickerContent",
    "section": "Properties",
    "route": "/api/api/classes/MatTimepickerContent",
    "fragment": "properties",
    "content": "Step for minutes."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatTimepickerContent"
    ],
    "pageType": "api",
    "title": "MatTimepickerContent",
    "section": "Properties",
    "route": "/api/api/classes/MatTimepickerContent",
    "fragment": "properties",
    "content": "Display mode."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatTimepickerContent"
    ],
    "pageType": "api",
    "title": "MatTimepickerContent",
    "section": "Properties",
    "route": "/api/api/classes/MatTimepickerContent",
    "fragment": "properties",
    "content": "Orientation for dial mode."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatTimepickerContent"
    ],
    "pageType": "api",
    "title": "MatTimepickerContent",
    "section": "Properties",
    "route": "/api/api/classes/MatTimepickerContent",
    "fragment": "properties",
    "content": "Whether should toggle face button be shown."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatTimepickerContent"
    ],
    "pageType": "api",
    "title": "MatTimepickerContent",
    "section": "Properties",
    "route": "/api/api/classes/MatTimepickerContent",
    "fragment": "properties",
    "content": "Reference to the timepicker that created the overlay."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatTimepickerContent"
    ],
    "pageType": "api",
    "title": "MatTimepickerContent",
    "section": "Methods",
    "route": "/api/api/classes/MatTimepickerContent",
    "fragment": "methods",
    "content": "Applies the current pending selection to the global model."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatTimepickerContent"
    ],
    "pageType": "api",
    "title": "MatTimepickerContent",
    "section": "Methods",
    "route": "/api/api/classes/MatTimepickerContent",
    "fragment": "methods",
    "content": "Assigns a new portal containing the timepicker actions."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatTimepickerContent"
    ],
    "pageType": "api",
    "title": "MatTimepickerContent",
    "section": "Methods",
    "route": "/api/api/classes/MatTimepickerContent",
    "fragment": "methods",
    "content": "Portal with the actions to be assigned."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatTimepickerContent"
    ],
    "pageType": "api",
    "title": "MatTimepickerContent",
    "section": "Methods",
    "route": "/api/api/classes/MatTimepickerContent",
    "fragment": "methods",
    "content": "Whether a re-render of the portal should be triggered. This isn't necessary if the portal is assigned during initialization, but it may be required if it's added at a later point."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatTimepickerContent"
    ],
    "pageType": "api",
    "title": "MatTimepickerContent",
    "section": "Methods",
    "route": "/api/api/classes/MatTimepickerContent",
    "fragment": "methods",
    "content": "Changes animation state while closing timepicker content."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "timeInputsHaveChanged"
    ],
    "pageType": "api",
    "title": "timeInputsHaveChanged",
    "section": "timeInputsHaveChanged",
    "route": "/api/api/functions/timeInputsHaveChanged",
    "fragment": "timeinputshavechanged",
    "content": "Checks whether the SimpleChanges object from an ngOnChanges callback has any changes, accounting for time objects."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatTimepickerInputEvent"
    ],
    "pageType": "api",
    "title": "MatTimepickerInputEvent",
    "section": "MatTimepickerInputEvent",
    "route": "/api/api/classes/MatTimepickerInputEvent",
    "fragment": "mattimepickerinputevent",
    "content": "An event used for timepicker input and change events. We don't always have access to a native input or change event because the event may have been triggered by the user clicking on the clock popup. For consistency, we always use MatTimepickerInputEvent instead."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatTimepickerInputEvent"
    ],
    "pageType": "api",
    "title": "MatTimepickerInputEvent",
    "section": "Properties",
    "route": "/api/api/classes/MatTimepickerInputEvent",
    "fragment": "properties",
    "content": "The new value for the target timepicker input."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatTimepickerInputBase"
    ],
    "pageType": "api",
    "title": "MatTimepickerInputBase",
    "section": "MatTimepickerInputBase",
    "route": "/api/api/classes/MatTimepickerInputBase",
    "fragment": "mattimepickerinputbase"
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatTimepickerInputBase"
    ],
    "pageType": "api",
    "title": "MatTimepickerInputBase",
    "section": "Properties",
    "route": "/api/api/classes/MatTimepickerInputBase",
    "fragment": "properties",
    "content": "Whether the last value set on the input was valid."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatTimepickerInputBase"
    ],
    "pageType": "api",
    "title": "MatTimepickerInputBase",
    "section": "Properties",
    "route": "/api/api/classes/MatTimepickerInputBase",
    "fragment": "properties",
    "content": "Combined form control validator for this input."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatTimepickerInputBase"
    ],
    "pageType": "api",
    "title": "MatTimepickerInputBase",
    "section": "Properties",
    "route": "/api/api/classes/MatTimepickerInputBase",
    "fragment": "properties",
    "content": "Emits when the internal state has changed"
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatTimepickerInputBase"
    ],
    "pageType": "api",
    "title": "MatTimepickerInputBase",
    "section": "Properties",
    "route": "/api/api/classes/MatTimepickerInputBase",
    "fragment": "properties",
    "content": "Emits when a change event is fired on this ."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatTimepickerInputBase"
    ],
    "pageType": "api",
    "title": "MatTimepickerInputBase",
    "section": "Properties",
    "route": "/api/api/classes/MatTimepickerInputBase",
    "fragment": "properties",
    "content": "Emits when an input event is fired on this ."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatTimepickerInputBase"
    ],
    "pageType": "api",
    "title": "MatTimepickerInputBase",
    "section": "Accessors",
    "route": "/api/api/classes/MatTimepickerInputBase",
    "fragment": "accessors",
    "content": "Whether the timepicker-input is disabled."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatTimepickerInputBase"
    ],
    "pageType": "api",
    "title": "MatTimepickerInputBase",
    "section": "Accessors",
    "route": "/api/api/classes/MatTimepickerInputBase",
    "fragment": "accessors",
    "content": "The value of the input."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatTimepickerInputBase"
    ],
    "pageType": "api",
    "title": "MatTimepickerInputBase",
    "section": "Methods",
    "route": "/api/api/classes/MatTimepickerInputBase",
    "fragment": "methods",
    "content": "Programmatically assigns a value to the input."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatTimepickerInputBase"
    ],
    "pageType": "api",
    "title": "MatTimepickerInputBase",
    "section": "Methods",
    "route": "/api/api/classes/MatTimepickerInputBase",
    "fragment": "methods",
    "content": "Assigns a value to the input's model."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatTimepickerInputBase"
    ],
    "pageType": "api",
    "title": "MatTimepickerInputBase",
    "section": "Methods",
    "route": "/api/api/classes/MatTimepickerInputBase",
    "fragment": "methods",
    "content": "Formats a value and sets it on the input element."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatTimepickerInputBase"
    ],
    "pageType": "api",
    "title": "MatTimepickerInputBase",
    "section": "Methods",
    "route": "/api/api/classes/MatTimepickerInputBase",
    "fragment": "methods",
    "content": "Gets the maximum time for the input. Used for validation."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatTimepickerInputBase"
    ],
    "pageType": "api",
    "title": "MatTimepickerInputBase",
    "section": "Methods",
    "route": "/api/api/classes/MatTimepickerInputBase",
    "fragment": "methods",
    "content": "Gets the minimum time for the input. Used for validation."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatTimepickerInputBase"
    ],
    "pageType": "api",
    "title": "MatTimepickerInputBase",
    "section": "Methods",
    "route": "/api/api/classes/MatTimepickerInputBase",
    "fragment": "methods",
    "content": "Gets the base validator functions."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatTimepickerInputBase"
    ],
    "pageType": "api",
    "title": "MatTimepickerInputBase",
    "section": "Methods",
    "route": "/api/api/classes/MatTimepickerInputBase",
    "fragment": "methods",
    "content": "Converts a value from the model into a native value for the input."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatTimepickerInputBase"
    ],
    "pageType": "api",
    "title": "MatTimepickerInputBase",
    "section": "Methods",
    "route": "/api/api/classes/MatTimepickerInputBase",
    "fragment": "methods",
    "content": "Handles blur event on the input."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatTimepickerInputBase"
    ],
    "pageType": "api",
    "title": "MatTimepickerInputBase",
    "section": "Methods",
    "route": "/api/api/classes/MatTimepickerInputBase",
    "fragment": "methods",
    "content": "Handles change event on the input."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatTimepickerInputBase"
    ],
    "pageType": "api",
    "title": "MatTimepickerInputBase",
    "section": "Methods",
    "route": "/api/api/classes/MatTimepickerInputBase",
    "fragment": "methods",
    "content": "Registers a time selection model with the input."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatTimepickerInputBase"
    ],
    "pageType": "api",
    "title": "MatTimepickerInputBase",
    "section": "Methods",
    "route": "/api/api/classes/MatTimepickerInputBase",
    "fragment": "methods",
    "content": "Predicate that determines whether the input should handle a particular change event."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatTimepickerInputBase"
    ],
    "pageType": "api",
    "title": "MatTimepickerInputBase",
    "section": "Methods",
    "route": "/api/api/classes/MatTimepickerInputBase",
    "fragment": "methods",
    "content": "Implemented as part of ControlValueAccessor."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatTimepickerInputBase"
    ],
    "pageType": "api",
    "title": "MatTimepickerInputBase",
    "section": "Methods",
    "route": "/api/api/classes/MatTimepickerInputBase",
    "fragment": "methods",
    "content": "Implemented as part of ControlValueAccessor."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatTimepickerInputBase"
    ],
    "pageType": "api",
    "title": "MatTimepickerInputBase",
    "section": "Methods",
    "route": "/api/api/classes/MatTimepickerInputBase",
    "fragment": "methods",
    "content": "Implemented as part of ControlValueAccessor."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatTimepickerInputBase"
    ],
    "pageType": "api",
    "title": "MatTimepickerInputBase",
    "section": "Methods",
    "route": "/api/api/classes/MatTimepickerInputBase",
    "fragment": "methods",
    "content": "Implemented as part of ControlValueAccessor."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MAT_TIMEPICKER_VALUE_ACCESSOR"
    ],
    "pageType": "api",
    "title": "MAT_TIMEPICKER_VALUE_ACCESSOR",
    "section": "MAT_TIMEPICKER_VALUE_ACCESSOR",
    "route": "/api/api/variables/MAT_TIMEPICKER_VALUE_ACCESSOR",
    "fragment": "mat_timepicker_value_accessor"
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MAT_TIMEPICKER_VALIDATORS"
    ],
    "pageType": "api",
    "title": "MAT_TIMEPICKER_VALIDATORS",
    "section": "MAT_TIMEPICKER_VALIDATORS",
    "route": "/api/api/variables/MAT_TIMEPICKER_VALIDATORS",
    "fragment": "mat_timepicker_validators"
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatTimepickerInput"
    ],
    "pageType": "api",
    "title": "MatTimepickerInput",
    "section": "MatTimepickerInput",
    "route": "/api/api/classes/MatTimepickerInput",
    "fragment": "mattimepickerinput",
    "content": "Directive used to connect an input to a MatTimepicker."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatTimepickerInput"
    ],
    "pageType": "api",
    "title": "MatTimepickerInput",
    "section": "Properties",
    "route": "/api/api/classes/MatTimepickerInput",
    "fragment": "properties",
    "content": "Whether the last value set on the input was valid."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatTimepickerInput"
    ],
    "pageType": "api",
    "title": "MatTimepickerInput",
    "section": "Properties",
    "route": "/api/api/classes/MatTimepickerInput",
    "fragment": "properties",
    "content": "The combined form control validator for this input."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatTimepickerInput"
    ],
    "pageType": "api",
    "title": "MatTimepickerInput",
    "section": "Properties",
    "route": "/api/api/classes/MatTimepickerInput",
    "fragment": "properties",
    "content": "Emits when the internal state has changed"
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatTimepickerInput"
    ],
    "pageType": "api",
    "title": "MatTimepickerInput",
    "section": "Properties",
    "route": "/api/api/classes/MatTimepickerInput",
    "fragment": "properties",
    "content": "Emits when a change event is fired on this ."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatTimepickerInput"
    ],
    "pageType": "api",
    "title": "MatTimepickerInput",
    "section": "Properties",
    "route": "/api/api/classes/MatTimepickerInput",
    "fragment": "properties",
    "content": "Emits when an input event is fired on this ."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatTimepickerInput"
    ],
    "pageType": "api",
    "title": "MatTimepickerInput",
    "section": "Accessors",
    "route": "/api/api/classes/MatTimepickerInput",
    "fragment": "accessors",
    "content": "Whether the timepicker-input is disabled."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatTimepickerInput"
    ],
    "pageType": "api",
    "title": "MatTimepickerInput",
    "section": "Accessors",
    "route": "/api/api/classes/MatTimepickerInput",
    "fragment": "accessors",
    "content": "The timepicker that this input is associated with."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatTimepickerInput"
    ],
    "pageType": "api",
    "title": "MatTimepickerInput",
    "section": "Accessors",
    "route": "/api/api/classes/MatTimepickerInput",
    "fragment": "accessors",
    "content": "The maximum valid date."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatTimepickerInput"
    ],
    "pageType": "api",
    "title": "MatTimepickerInput",
    "section": "Accessors",
    "route": "/api/api/classes/MatTimepickerInput",
    "fragment": "accessors",
    "content": "The minimum valid date."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatTimepickerInput"
    ],
    "pageType": "api",
    "title": "MatTimepickerInput",
    "section": "Accessors",
    "route": "/api/api/classes/MatTimepickerInput",
    "fragment": "accessors",
    "content": "The value of the input."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatTimepickerInput"
    ],
    "pageType": "api",
    "title": "MatTimepickerInput",
    "section": "Methods",
    "route": "/api/api/classes/MatTimepickerInput",
    "fragment": "methods",
    "content": "Programmatically assigns a value to the input."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatTimepickerInput"
    ],
    "pageType": "api",
    "title": "MatTimepickerInput",
    "section": "Methods",
    "route": "/api/api/classes/MatTimepickerInput",
    "fragment": "methods",
    "content": "Assigns a value to the input's model."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatTimepickerInput"
    ],
    "pageType": "api",
    "title": "MatTimepickerInput",
    "section": "Methods",
    "route": "/api/api/classes/MatTimepickerInput",
    "fragment": "methods",
    "content": "Formats a value and sets it on the input element."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatTimepickerInput"
    ],
    "pageType": "api",
    "title": "MatTimepickerInput",
    "section": "Methods",
    "route": "/api/api/classes/MatTimepickerInput",
    "fragment": "methods",
    "content": "Gets the input's maximum time."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatTimepickerInput"
    ],
    "pageType": "api",
    "title": "MatTimepickerInput",
    "section": "Methods",
    "route": "/api/api/classes/MatTimepickerInput",
    "fragment": "methods",
    "content": "Gets the input's minimum time."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatTimepickerInput"
    ],
    "pageType": "api",
    "title": "MatTimepickerInput",
    "section": "Methods",
    "route": "/api/api/classes/MatTimepickerInput",
    "fragment": "methods",
    "content": "Gets the base validator functions."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatTimepickerInput"
    ],
    "pageType": "api",
    "title": "MatTimepickerInput",
    "section": "Methods",
    "route": "/api/api/classes/MatTimepickerInput",
    "fragment": "methods",
    "content": "Converts a value from the model into a native value for the input."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatTimepickerInput"
    ],
    "pageType": "api",
    "title": "MatTimepickerInput",
    "section": "Methods",
    "route": "/api/api/classes/MatTimepickerInput",
    "fragment": "methods",
    "content": "Handles blur event on the input."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatTimepickerInput"
    ],
    "pageType": "api",
    "title": "MatTimepickerInput",
    "section": "Methods",
    "route": "/api/api/classes/MatTimepickerInput",
    "fragment": "methods",
    "content": "Handles change event on the input."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatTimepickerInput"
    ],
    "pageType": "api",
    "title": "MatTimepickerInput",
    "section": "Methods",
    "route": "/api/api/classes/MatTimepickerInput",
    "fragment": "methods",
    "content": "Registers a time selection model with the input."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatTimepickerInput"
    ],
    "pageType": "api",
    "title": "MatTimepickerInput",
    "section": "Methods",
    "route": "/api/api/classes/MatTimepickerInput",
    "fragment": "methods",
    "content": "Predicate that determines whether the input should handle a particular change event."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatTimepickerInput"
    ],
    "pageType": "api",
    "title": "MatTimepickerInput",
    "section": "Methods",
    "route": "/api/api/classes/MatTimepickerInput",
    "fragment": "methods",
    "content": "Gets the element that the timepicker popup should be connected to. The element to connect the popup to."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatTimepickerInput"
    ],
    "pageType": "api",
    "title": "MatTimepickerInput",
    "section": "Methods",
    "route": "/api/api/classes/MatTimepickerInput",
    "fragment": "methods",
    "content": "Gets the ID of an element that should be used a description for the timepicker overlay."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatTimepickerInput"
    ],
    "pageType": "api",
    "title": "MatTimepickerInput",
    "section": "Methods",
    "route": "/api/api/classes/MatTimepickerInput",
    "fragment": "methods",
    "content": "Returns the palette used by the input's form field, if any."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatTimepickerInput"
    ],
    "pageType": "api",
    "title": "MatTimepickerInput",
    "section": "Methods",
    "route": "/api/api/classes/MatTimepickerInput",
    "fragment": "methods",
    "content": "Implemented as part of ControlValueAccessor."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatTimepickerInput"
    ],
    "pageType": "api",
    "title": "MatTimepickerInput",
    "section": "Methods",
    "route": "/api/api/classes/MatTimepickerInput",
    "fragment": "methods",
    "content": "Implemented as part of ControlValueAccessor."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatTimepickerInput"
    ],
    "pageType": "api",
    "title": "MatTimepickerInput",
    "section": "Methods",
    "route": "/api/api/classes/MatTimepickerInput",
    "fragment": "methods",
    "content": "Implemented as part of ControlValueAccessor."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatTimepickerInput"
    ],
    "pageType": "api",
    "title": "MatTimepickerInput",
    "section": "Methods",
    "route": "/api/api/classes/MatTimepickerInput",
    "fragment": "methods",
    "content": "Implemented as part of ControlValueAccessor."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatTimepickerIntl"
    ],
    "pageType": "api",
    "title": "MatTimepickerIntl",
    "section": "MatTimepickerIntl",
    "route": "/api/api/classes/MatTimepickerIntl",
    "fragment": "mattimepickerintl"
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatTimepickerIntl"
    ],
    "pageType": "api",
    "title": "MatTimepickerIntl",
    "section": "Properties",
    "route": "/api/api/classes/MatTimepickerIntl",
    "fragment": "properties",
    "content": "A label for cancel button to close timepicker."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatTimepickerIntl"
    ],
    "pageType": "api",
    "title": "MatTimepickerIntl",
    "section": "Properties",
    "route": "/api/api/classes/MatTimepickerIntl",
    "fragment": "properties",
    "content": "Label for the button used to close the timepicker popup (used by screen readers)."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatTimepickerIntl"
    ],
    "pageType": "api",
    "title": "MatTimepickerIntl",
    "section": "Properties",
    "route": "/api/api/classes/MatTimepickerIntl",
    "fragment": "properties",
    "content": "A label for dials title."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatTimepickerIntl"
    ],
    "pageType": "api",
    "title": "MatTimepickerIntl",
    "section": "Properties",
    "route": "/api/api/classes/MatTimepickerIntl",
    "fragment": "properties",
    "content": "A label for hour input hint."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatTimepickerIntl"
    ],
    "pageType": "api",
    "title": "MatTimepickerIntl",
    "section": "Properties",
    "route": "/api/api/classes/MatTimepickerIntl",
    "fragment": "properties",
    "content": "A label for inputs title."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatTimepickerIntl"
    ],
    "pageType": "api",
    "title": "MatTimepickerIntl",
    "section": "Properties",
    "route": "/api/api/classes/MatTimepickerIntl",
    "fragment": "properties",
    "content": "A label for minute input hint."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatTimepickerIntl"
    ],
    "pageType": "api",
    "title": "MatTimepickerIntl",
    "section": "Properties",
    "route": "/api/api/classes/MatTimepickerIntl",
    "fragment": "properties",
    "content": "A label for OK button to apply time."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatTimepickerIntl"
    ],
    "pageType": "api",
    "title": "MatTimepickerIntl",
    "section": "Properties",
    "route": "/api/api/classes/MatTimepickerIntl",
    "fragment": "properties",
    "content": "Label for the button used to open the timepicker popup (used by screen readers)."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MAT_TIMEPICKER_SCROLL_STRATEGY_FACTORY"
    ],
    "pageType": "api",
    "title": "MAT_TIMEPICKER_SCROLL_STRATEGY_FACTORY",
    "section": "MAT_TIMEPICKER_SCROLL_STRATEGY_FACTORY",
    "route": "/api/api/functions/MAT_TIMEPICKER_SCROLL_STRATEGY_FACTORY",
    "fragment": "mat_timepicker_scroll_strategy_factory",
    "content": "Timepicker scroll strategy factory."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MAT_TIMEPICKER_SCROLL_STRATEGY"
    ],
    "pageType": "api",
    "title": "MAT_TIMEPICKER_SCROLL_STRATEGY",
    "section": "MAT_TIMEPICKER_SCROLL_STRATEGY",
    "route": "/api/api/variables/MAT_TIMEPICKER_SCROLL_STRATEGY",
    "fragment": "mat_timepicker_scroll_strategy",
    "content": "Injection token that determines the scroll handling while the timepicker is open."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MAT_TIMEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER"
    ],
    "pageType": "api",
    "title": "MAT_TIMEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER",
    "section": "MAT_TIMEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER",
    "route": "/api/api/variables/MAT_TIMEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER",
    "fragment": "mat_timepicker_scroll_strategy_factory_provider",
    "content": "Timepicker scroll strategy provider."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatTimepickerToggleIcon"
    ],
    "pageType": "api",
    "title": "MatTimepickerToggleIcon",
    "section": "MatTimepickerToggleIcon",
    "route": "/api/api/classes/MatTimepickerToggleIcon",
    "fragment": "mattimepickertoggleicon"
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatTimepickerToggle"
    ],
    "pageType": "api",
    "title": "MatTimepickerToggle",
    "section": "MatTimepickerToggle",
    "route": "/api/api/classes/MatTimepickerToggle",
    "fragment": "mattimepickertoggle"
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatTimepickerToggle"
    ],
    "pageType": "api",
    "title": "MatTimepickerToggle",
    "section": "Properties",
    "route": "/api/api/classes/MatTimepickerToggle",
    "fragment": "properties",
    "content": "Screen-reader label for the button."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatTimepickerToggle"
    ],
    "pageType": "api",
    "title": "MatTimepickerToggle",
    "section": "Properties",
    "route": "/api/api/classes/MatTimepickerToggle",
    "fragment": "properties",
    "content": "Custom icon set by the consumer."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatTimepickerToggle"
    ],
    "pageType": "api",
    "title": "MatTimepickerToggle",
    "section": "Properties",
    "route": "/api/api/classes/MatTimepickerToggle",
    "fragment": "properties",
    "content": "Whether ripples on the toggle should be disabled."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatTimepickerToggle"
    ],
    "pageType": "api",
    "title": "MatTimepickerToggle",
    "section": "Properties",
    "route": "/api/api/classes/MatTimepickerToggle",
    "fragment": "properties",
    "content": "Tabindex for the toggle."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatTimepickerToggle"
    ],
    "pageType": "api",
    "title": "MatTimepickerToggle",
    "section": "Properties",
    "route": "/api/api/classes/MatTimepickerToggle",
    "fragment": "properties",
    "content": "Timepicker instance."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatTimepickerToggle"
    ],
    "pageType": "api",
    "title": "MatTimepickerToggle",
    "section": "Accessors",
    "route": "/api/api/classes/MatTimepickerToggle",
    "fragment": "accessors",
    "content": "Whether the toggle button is disabled."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatTimepickerToggle"
    ],
    "pageType": "api",
    "title": "MatTimepickerToggle",
    "section": "Methods",
    "route": "/api/api/classes/MatTimepickerToggle",
    "fragment": "methods",
    "content": "Opens timepicker."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatTimepickerModule"
    ],
    "pageType": "api",
    "title": "MatTimepickerModule",
    "section": "MatTimepickerModule",
    "route": "/api/api/classes/MatTimepickerModule",
    "fragment": "mattimepickermodule"
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatTimepicker"
    ],
    "pageType": "api",
    "title": "MatTimepicker",
    "section": "MatTimepicker",
    "route": "/api/api/classes/MatTimepicker",
    "fragment": "mattimepicker"
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatTimepicker"
    ],
    "pageType": "api",
    "title": "MatTimepicker",
    "section": "Properties",
    "route": "/api/api/classes/MatTimepicker",
    "fragment": "properties",
    "content": "Portal with projected action buttons."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatTimepicker"
    ],
    "pageType": "api",
    "title": "MatTimepicker",
    "section": "Properties",
    "route": "/api/api/classes/MatTimepicker",
    "fragment": "properties",
    "content": "Emits when the timepicker has been closed."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatTimepicker"
    ],
    "pageType": "api",
    "title": "MatTimepicker",
    "section": "Properties",
    "route": "/api/api/classes/MatTimepicker",
    "fragment": "properties",
    "content": "The id for the timepicker."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatTimepicker"
    ],
    "pageType": "api",
    "title": "MatTimepicker",
    "section": "Properties",
    "route": "/api/api/classes/MatTimepicker",
    "fragment": "properties",
    "content": "Emits when the timepicker has been opened."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatTimepicker"
    ],
    "pageType": "api",
    "title": "MatTimepicker",
    "section": "Properties",
    "route": "/api/api/classes/MatTimepicker",
    "fragment": "properties",
    "content": "Whether to restore focus to the previously-focused element when the timepicker is closed. Note that automatic focus restoration is an accessibility feature and it is recommended that you provide your own equivalent, if you decide to turn it off."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatTimepicker"
    ],
    "pageType": "api",
    "title": "MatTimepicker",
    "section": "Properties",
    "route": "/api/api/classes/MatTimepicker",
    "fragment": "properties",
    "content": "Emits when the timepicker's state changes."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatTimepicker"
    ],
    "pageType": "api",
    "title": "MatTimepicker",
    "section": "Properties",
    "route": "/api/api/classes/MatTimepicker",
    "fragment": "properties",
    "content": "The input element this timepicker is associated with."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatTimepicker"
    ],
    "pageType": "api",
    "title": "MatTimepicker",
    "section": "Properties",
    "route": "/api/api/classes/MatTimepicker",
    "fragment": "properties",
    "content": "Preferred position of the timepicker in the X axis."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatTimepicker"
    ],
    "pageType": "api",
    "title": "MatTimepicker",
    "section": "Properties",
    "route": "/api/api/classes/MatTimepicker",
    "fragment": "properties",
    "content": "Preferred position of the timepicker in the Y axis."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatTimepicker"
    ],
    "pageType": "api",
    "title": "MatTimepicker",
    "section": "Accessors",
    "route": "/api/api/classes/MatTimepicker",
    "fragment": "accessors",
    "content": "Color palette to use on the timepicker's content."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatTimepicker"
    ],
    "pageType": "api",
    "title": "MatTimepicker",
    "section": "Accessors",
    "route": "/api/api/classes/MatTimepicker",
    "fragment": "accessors",
    "content": "Whether the timepicker pop-up should be disabled."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatTimepicker"
    ],
    "pageType": "api",
    "title": "MatTimepicker",
    "section": "Accessors",
    "route": "/api/api/classes/MatTimepicker",
    "fragment": "accessors",
    "content": "Timepicker period format."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatTimepicker"
    ],
    "pageType": "api",
    "title": "MatTimepicker",
    "section": "Accessors",
    "route": "/api/api/classes/MatTimepicker",
    "fragment": "accessors",
    "content": "Step for minutes."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatTimepicker"
    ],
    "pageType": "api",
    "title": "MatTimepicker",
    "section": "Accessors",
    "route": "/api/api/classes/MatTimepicker",
    "fragment": "accessors",
    "content": "Timepicker display mode."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatTimepicker"
    ],
    "pageType": "api",
    "title": "MatTimepicker",
    "section": "Accessors",
    "route": "/api/api/classes/MatTimepicker",
    "fragment": "accessors",
    "content": "Whether the timepicker mode which determines what the timepicker will be opened as."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatTimepicker"
    ],
    "pageType": "api",
    "title": "MatTimepicker",
    "section": "Accessors",
    "route": "/api/api/classes/MatTimepicker",
    "fragment": "accessors",
    "content": "Whether the timepicker is open."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatTimepicker"
    ],
    "pageType": "api",
    "title": "MatTimepicker",
    "section": "Accessors",
    "route": "/api/api/classes/MatTimepicker",
    "fragment": "accessors",
    "content": "Orientation for dial mode."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatTimepicker"
    ],
    "pageType": "api",
    "title": "MatTimepicker",
    "section": "Accessors",
    "route": "/api/api/classes/MatTimepicker",
    "fragment": "accessors",
    "content": "Show or hide toggle button between dial and input."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatTimepicker"
    ],
    "pageType": "api",
    "title": "MatTimepicker",
    "section": "Accessors",
    "route": "/api/api/classes/MatTimepicker",
    "fragment": "accessors",
    "content": "Whether the timepicker UI is in touch mode. In touch mode elements are larger for bigger touch targets."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatTimepicker"
    ],
    "pageType": "api",
    "title": "MatTimepicker",
    "section": "Methods",
    "route": "/api/api/classes/MatTimepicker",
    "fragment": "methods",
    "content": "Applies the current pending selection on the overlay to the model."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatTimepicker"
    ],
    "pageType": "api",
    "title": "MatTimepicker",
    "section": "Methods",
    "route": "/api/api/classes/MatTimepicker",
    "fragment": "methods",
    "content": "Forwards relevant values from the timepicker to the timepicker content inside the overlay."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatTimepicker"
    ],
    "pageType": "api",
    "title": "MatTimepicker",
    "section": "Methods",
    "route": "/api/api/classes/MatTimepicker",
    "fragment": "methods",
    "content": "The maximum selectable time."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatTimepicker"
    ],
    "pageType": "api",
    "title": "MatTimepicker",
    "section": "Methods",
    "route": "/api/api/classes/MatTimepicker",
    "fragment": "methods",
    "content": "The minimum selectable time."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatTimepicker"
    ],
    "pageType": "api",
    "title": "MatTimepicker",
    "section": "Methods",
    "route": "/api/api/classes/MatTimepicker",
    "fragment": "methods",
    "content": "Closes the timepicker."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatTimepicker"
    ],
    "pageType": "api",
    "title": "MatTimepicker",
    "section": "Methods",
    "route": "/api/api/classes/MatTimepicker",
    "fragment": "methods",
    "content": "Opens the timepicker."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatTimepicker"
    ],
    "pageType": "api",
    "title": "MatTimepicker",
    "section": "Methods",
    "route": "/api/api/classes/MatTimepicker",
    "fragment": "methods",
    "content": "Registers a portal containing action buttons with the timepicker."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatTimepicker"
    ],
    "pageType": "api",
    "title": "MatTimepicker",
    "section": "Methods",
    "route": "/api/api/classes/MatTimepicker",
    "fragment": "methods",
    "content": "Portal to be registered."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatTimepicker"
    ],
    "pageType": "api",
    "title": "MatTimepicker",
    "section": "Methods",
    "route": "/api/api/classes/MatTimepicker",
    "fragment": "methods",
    "content": "Register an input with this timepicker."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatTimepicker"
    ],
    "pageType": "api",
    "title": "MatTimepicker",
    "section": "Methods",
    "route": "/api/api/classes/MatTimepicker",
    "fragment": "methods",
    "content": "The timepicker input to register with this timepicker."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatTimepicker"
    ],
    "pageType": "api",
    "title": "MatTimepicker",
    "section": "Methods",
    "route": "/api/api/classes/MatTimepicker",
    "fragment": "methods",
    "content": "Removes a portal containing action buttons from the timepicker."
  },
  {
    "breadcrumbs": [
      "API",
      "ngx-mat-timepicker",
      "MatTimepicker"
    ],
    "pageType": "api",
    "title": "MatTimepicker",
    "section": "Methods",
    "route": "/api/api/classes/MatTimepicker",
    "fragment": "methods",
    "content": "Portal to be removed."
  }
]