[
  {
    "breadcrumbs": [
      "Getting started"
    ],
    "pageType": "guide",
    "title": "Getting started",
    "section": "Getting started",
    "route": "/getting-started",
    "fragment": "getting-started",
    "content": "You have to install the Angular Material and set it up. Learn more about the setup. Install the ngx-mat-timepicker: or"
  },
  {
    "breadcrumbs": [
      "Getting started"
    ],
    "pageType": "guide",
    "title": "Getting started",
    "section": "Import module",
    "route": "/getting-started",
    "fragment": "import-module",
    "content": "Import MatTimepickerModule to your project."
  },
  {
    "breadcrumbs": [
      "Getting started"
    ],
    "pageType": "guide",
    "title": "Getting started",
    "section": "Adapter",
    "route": "/getting-started",
    "fragment": "adapter",
    "content": "Add a timepicker adapter. or create and add your own"
  },
  {
    "breadcrumbs": [
      "Getting started"
    ],
    "pageType": "guide",
    "title": "Getting started",
    "section": "Theming",
    "route": "/getting-started",
    "fragment": "theming",
    "content": "Then you have to define a theme. More details about theming. As ngx-mat-timepicker uses some material components, it's necessary to add theme for them."
  },
  {
    "breadcrumbs": [
      "Usage"
    ],
    "pageType": "guide",
    "title": "Usage",
    "section": "Basic",
    "route": "/usage",
    "fragment": "basic",
    "content": "The timepicker allows users to enter a time either through text input, or by choosing a time from the dial or by inputs. First, it will be checked if any time is selected, if so it will open pop-up with that time. Otherwise it will open pop-up with the current time."
  },
  {
    "breadcrumbs": [
      "Usage"
    ],
    "pageType": "guide",
    "title": "Usage",
    "section": "Connecting a timepicker to an input",
    "route": "/usage",
    "fragment": "connecting-a-timepicker-to-an-input",
    "content": "A timepicker is composed of a text input and a pop-up with dial or inputs view, connected via the matTimepicker property on the text input. There is also an optional timepicker toggle button that gives the user an easy way to open the timepicker pop-up. This works exactly the same with an input that is part of an "
  },
  {
    "breadcrumbs": [
      "Usage"
    ],
    "pageType": "guide",
    "title": "Usage",
    "section": "Connecting a timepicker to an input",
    "route": "/usage",
    "fragment": "connecting-a-timepicker-to-an-input",
    "content": " and the toggle can easily be used as a prefix or suffix on the Material input:"
  },
  {
    "breadcrumbs": [
      "Usage"
    ],
    "pageType": "guide",
    "title": "Usage",
    "section": "Connecting a timepicker to an input",
    "route": "/usage",
    "fragment": "connecting-a-timepicker-to-an-input",
    "content": "If you want to customize the icon that is rendered inside the mat-timepicker-toggle, you can do so by using the matTimepickerToggleIcon directive:"
  },
  {
    "breadcrumbs": [
      "Usage"
    ],
    "pageType": "guide",
    "title": "Usage",
    "section": "Starting view",
    "route": "/usage",
    "fragment": "starting-view",
    "content": "The mode property of "
  },
  {
    "breadcrumbs": [
      "Usage"
    ],
    "pageType": "guide",
    "title": "Usage",
    "section": "Starting view",
    "route": "/usage",
    "fragment": "starting-view",
    "content": " can be used to set the view that will show up when the pop-up first opens. It can be set to dial (default) and input."
  },
  {
    "breadcrumbs": [
      "Usage"
    ],
    "pageType": "guide",
    "title": "Usage",
    "section": "Starting view",
    "route": "/usage",
    "fragment": "starting-view",
    "content": "The are two time formats 12h and 24h. The format property of "
  },
  {
    "breadcrumbs": [
      "Usage"
    ],
    "pageType": "guide",
    "title": "Usage",
    "section": "Starting view",
    "route": "/usage",
    "fragment": "starting-view",
    "content": " is used to set the format for the timepicker. 12h is used by default."
  },
  {
    "breadcrumbs": [
      "Usage"
    ],
    "pageType": "guide",
    "title": "Usage",
    "section": "Starting view",
    "route": "/usage",
    "fragment": "starting-view",
    "content": "By default, the timepicker is opened as pop-up. Use openAs property with dialog value to open it as material dialog. There is an additional view for dial mode. You can use orientation property for "
  },
  {
    "breadcrumbs": [
      "Usage"
    ],
    "pageType": "guide",
    "title": "Usage",
    "section": "Starting view",
    "route": "/usage",
    "fragment": "starting-view",
    "content": " to set elements horizontally. It works for dial mode only."
  },
  {
    "breadcrumbs": [
      "Usage"
    ],
    "pageType": "guide",
    "title": "Usage",
    "section": "Setting the selected time",
    "route": "/usage",
    "fragment": "setting-the-selected-time",
    "content": "The type of values that the timepicker expects depends on the type of TimeAdapter provided in your application. The MatNativeDateTimeModule, for example, works directly with plain JavaScript Date objects. This use of the adapter pattern allows the timepicker component to work with any arbitrary time representation with a custom TimeAdapter."
  },
  {
    "breadcrumbs": [
      "Usage"
    ],
    "pageType": "guide",
    "title": "Usage",
    "section": "Changing colors",
    "route": "/usage",
    "fragment": "changing-colors",
    "content": "The timepicker will automatically inherit the color palette (primary, accent, or warn) from the mat-form-field it is attached to. If you would like to specify a different palette for the timepicker you can do so by setting the color property on mat-timepicker."
  },
  {
    "breadcrumbs": [
      "Usage"
    ],
    "pageType": "guide",
    "title": "Usage",
    "section": "Time validation",
    "route": "/usage",
    "fragment": "time-validation",
    "content": "There are two properties to add time validation to the timepicker input - min and max. In addition to enforcing validation on the input, these properties will disable all hours and minutes on the timepicker before or after the respective values and prevent the user from choosing the time past the hours or minutes containing the min or max time. There are different errors that can be checked: a value that violates the min property will have a matTimepickerMin errora value that violates the max property will have a matTimepickerMax errora value that can not be parsed will have a matTimepickerParse error"
  },
  {
    "breadcrumbs": [
      "Usage"
    ],
    "pageType": "guide",
    "title": "Usage",
    "section": "Input and change events",
    "route": "/usage",
    "fragment": "input-and-change-events",
    "content": "The input's native (input) and (change) events will only trigger due to user interaction with the input element; they will not fire when the user selects a time from the timepicker popup. Therefore, the timepicker input also has support for (timeInput) and (timeChange) events. These trigger when the user interacts with either the input or the popup. The (timeInput) event will fire whenever the value changes due to the user typing or selecting a time from the timepicker. The (timeChange) event will fire whenever the user finishes typing input (on   blur), or when the user chooses a time from the timepicker."
  },
  {
    "breadcrumbs": [
      "Usage"
    ],
    "pageType": "guide",
    "title": "Usage",
    "section": "Disabling parts of the timepicker",
    "route": "/usage",
    "fragment": "disabling-parts-of-the-timepicker",
    "content": "As with any standard  , it is possible to disable the timepicker input by adding the disabled property. By default, the "
  },
  {
    "breadcrumbs": [
      "Usage"
    ],
    "pageType": "guide",
    "title": "Usage",
    "section": "Disabling parts of the timepicker",
    "route": "/usage",
    "fragment": "disabling-parts-of-the-timepicker",
    "content": " and "
  },
  {
    "breadcrumbs": [
      "Usage"
    ],
    "pageType": "guide",
    "title": "Usage",
    "section": "Disabling parts of the timepicker",
    "route": "/usage",
    "fragment": "disabling-parts-of-the-timepicker",
    "content": " will inherit their disabled state from the  , but this can be overridden by setting the disabled property on the timepicker or toggle elements. This can be useful if you want to disable text input but allow selection via the timepicker or vice-versa."
  },
  {
    "breadcrumbs": [
      "Usage"
    ],
    "pageType": "guide",
    "title": "Usage",
    "section": "Confirmation action buttons",
    "route": "/usage",
    "fragment": "confirmation-action-buttons",
    "content": "By default, the timepicker uses \"OK\" and \"Cancel\" buttons. If you want to change default buttons, you can "
  },
  {
    "breadcrumbs": [
      "Usage"
    ],
    "pageType": "guide",
    "title": "Usage",
    "section": "Confirmation action buttons",
    "route": "/usage",
    "fragment": "confirmation-action-buttons",
    "content": " element inside "
  },
  {
    "breadcrumbs": [
      "Usage"
    ],
    "pageType": "guide",
    "title": "Usage",
    "section": "Confirmation action buttons",
    "route": "/usage",
    "fragment": "confirmation-action-buttons",
    "content": " with with own buttons marked with the matTimepickerCancel and matTimepickerApply attributes respectively. Doing so will replace default buttons by yours."
  },
  {
    "breadcrumbs": [
      "Usage"
    ],
    "pageType": "guide",
    "title": "Usage",
    "section": "Touch UI mode",
    "route": "/usage",
    "fragment": "touch-ui-mode",
    "content": "The timepicker normally opens as a popup under the input. However this is not ideal for touch devices that don't have as much screen real estate and need bigger click targets. For this reason "
  },
  {
    "breadcrumbs": [
      "Usage"
    ],
    "pageType": "guide",
    "title": "Usage",
    "section": "Touch UI mode",
    "route": "/usage",
    "fragment": "touch-ui-mode",
    "content": " has a touchUi property that can be set to true in order to enable a more touch friendly UI where the timepicker opens in a dialog and has a larger elements. Applied for dial mode only."
  },
  {
    "breadcrumbs": [
      "Usage"
    ],
    "pageType": "guide",
    "title": "Usage",
    "section": "Manually open and close the timepicker",
    "route": "/usage",
    "fragment": "manually-open-and-close-the-timepicker",
    "content": "The timepicker popup can be programmatically controlled using the open and close methods on the "
  },
  {
    "breadcrumbs": [
      "Usage"
    ],
    "pageType": "guide",
    "title": "Usage",
    "section": "Manually open and close the timepicker",
    "route": "/usage",
    "fragment": "manually-open-and-close-the-timepicker",
    "content": ". It also has an opened property that reflects the status of the popup."
  },
  {
    "breadcrumbs": [
      "Usage"
    ],
    "pageType": "guide",
    "title": "Usage",
    "section": "Using inline style",
    "route": "/usage",
    "fragment": "using-inline-style",
    "content": "If you want to allow the user to select a time from the timepicker that is inlined on the page rather than contained in a popup, you can use "
  },
  {
    "breadcrumbs": [
      "Usage"
    ],
    "pageType": "guide",
    "title": "Usage",
    "section": "Using inline style",
    "route": "/usage",
    "fragment": "using-inline-style",
    "content": " or "
  },
  {
    "breadcrumbs": [
      "Usage"
    ],
    "pageType": "guide",
    "title": "Usage",
    "section": "Using inline style",
    "route": "/usage",
    "fragment": "using-inline-style",
    "content": " directly."
  },
  {
    "breadcrumbs": [
      "Usage"
    ],
    "pageType": "guide",
    "title": "Usage",
    "section": "Internationalization",
    "route": "/usage",
    "fragment": "internationalization",
    "content": "By default, the MAT_TIME_LOCALE injection token will use the existing LOCALE_ID locale code from @angular/core. If you want to override it, you can provide a new value for the MAT_TIME_LOCALE token: It's also possible to set the locale at runtime using the setLocale method of the TimeAdapter."
  },
  {
    "breadcrumbs": [
      "Usage"
    ],
    "pageType": "guide",
    "title": "Usage",
    "section": "Localizing labels and messages",
    "route": "/usage",
    "fragment": "localizing-labels-and-messages",
    "content": "The various text strings used by the timepicker are provided through MatTimepickerIntl. Localization of these messages can be done by providing a subclass with translated values in your application root module."
  },
  {
    "breadcrumbs": [
      "What is ngx-mat-timepicker?"
    ],
    "pageType": "guide",
    "title": "What is ngx-mat-timepicker?",
    "section": "What is ngx-mat-timepicker?",
    "route": "/what-is",
    "fragment": "what-is-ngx-mat-timepicker",
    "content": "ngx-mat-timepicker is a library which allow you to use timepicker for your Angular project. It's based on @angular/material and uses features from it."
  },
  {
    "breadcrumbs": [
      "What is ngx-mat-timepicker?"
    ],
    "pageType": "guide",
    "title": "What is ngx-mat-timepicker?",
    "section": "Motivation",
    "route": "/what-is",
    "fragment": "motivation",
    "content": "While working on some projects I needed to add a field with time choosing. As I used @angular/material it should be compatible with that by functionality and design. Unfortunately, a lot of libraries were out of date, had not the best UI or thier functionality didn't suit my project, had some bugs. I could choose from literally 2 libraries and none of them satisfied me completelly. I won't talk about exact libraries, some of them you might know. In my understanding, ngx-mat-timepicker should use @angular/material ecosystem, features and themization, suits material design as much as possible. It should give the impression that it's part of @angular/material but not a separate library. So, good UX and DX were the goal. Hence, the desire to create a library that would correspond all these criterias above, with intuitive integration with the project and good customization."
  },
  {
    "breadcrumbs": [
      "What is ngx-mat-timepicker?"
    ],
    "pageType": "guide",
    "title": "What is ngx-mat-timepicker?",
    "section": "How does it work?",
    "route": "/what-is",
    "fragment": "how-does-it-work",
    "content": "ngx-mat-timepicker contains module with all necessary components and another module with time adapter (uses native JS date under the hood). Adapter is used to unify the work with time. You can create your own adapter with any library to handle time. You have to import both modules, add theme style and use it by the same way as you use mat-datepicker. That's it!"
  }
]